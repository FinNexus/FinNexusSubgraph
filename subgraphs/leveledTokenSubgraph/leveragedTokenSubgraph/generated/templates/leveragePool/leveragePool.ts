// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BuyHedge extends ethereum.Event {
  get params(): BuyHedge__Params {
    return new BuyHedge__Params(this);
  }
}

export class BuyHedge__Params {
  _event: BuyHedge;

  constructor(event: BuyHedge) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get Coin(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get payAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get hedgeAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class BuyLeverage extends ethereum.Event {
  get params(): BuyLeverage__Params {
    return new BuyLeverage__Params(this);
  }
}

export class BuyLeverage__Params {
  _event: BuyLeverage;

  constructor(event: BuyLeverage) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get Coin(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get payAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get leverageAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Liquidate extends ethereum.Event {
  get params(): Liquidate__Params {
    return new Liquidate__Params(this);
  }
}

export class Liquidate__Params {
  _event: Liquidate;

  constructor(event: Liquidate) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get loan(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get leftAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OperatorTransferred extends ethereum.Event {
  get params(): OperatorTransferred__Params {
    return new OperatorTransferred__Params(this);
  }
}

export class OperatorTransferred__Params {
  _event: OperatorTransferred;

  constructor(event: OperatorTransferred) {
    this._event = event;
  }

  get previousOperator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOperator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OriginTransferred extends ethereum.Event {
  get params(): OriginTransferred__Params {
    return new OriginTransferred__Params(this);
  }
}

export class OriginTransferred__Params {
  _event: OriginTransferred;

  constructor(event: OriginTransferred) {
    this._event = event;
  }

  get previousOrigin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOrigin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Rebalance extends ethereum.Event {
  get params(): Rebalance__Params {
    return new Rebalance__Params(this);
  }
}

export class Rebalance__Params {
  _event: Rebalance;

  constructor(event: Rebalance) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyAount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sellAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get recieptor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SellHedge extends ethereum.Event {
  get params(): SellHedge__Params {
    return new SellHedge__Params(this);
  }
}

export class SellHedge__Params {
  _event: SellHedge;

  constructor(event: SellHedge) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get Coin(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get hedgeAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SellLeverage extends ethereum.Event {
  get params(): SellLeverage__Params {
    return new SellLeverage__Params(this);
  }
}

export class SellLeverage__Params {
  _event: SellLeverage;

  constructor(event: SellLeverage) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get Coin(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get leverageAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get fromCoin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get toCoin(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fromValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get toValue(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class leveragePool__buyPricesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class leveragePool__getCurrentLeverageRateResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class leveragePool__getEnableRebalanceAndLiquidateResult {
  value0: boolean;
  value1: boolean;

  constructor(value0: boolean, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class leveragePool__getHedgeInfoResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class leveragePool__getLeverageInfoResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class leveragePool__getLeverageRebaseResult {
  value0: boolean;
  value1: boolean;

  constructor(value0: boolean, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class leveragePool__getTokenNetworthsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class leveragePool__getTotalworthsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class leveragePool extends ethereum.SmartContract {
  static bind(address: Address): leveragePool {
    return new leveragePool("leveragePool", address);
  }

  buyFee(): BigInt {
    let result = super.call("buyFee", "buyFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_buyFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("buyFee", "buyFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyPrices(): leveragePool__buyPricesResult {
    let result = super.call("buyPrices", "buyPrices():(uint256,uint256)", []);

    return new leveragePool__buyPricesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_buyPrices(): ethereum.CallResult<leveragePool__buyPricesResult> {
    let result = super.tryCall(
      "buyPrices",
      "buyPrices():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new leveragePool__buyPricesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  defaultLeverageRatio(): BigInt {
    let result = super.call(
      "defaultLeverageRatio",
      "defaultLeverageRatio():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_defaultLeverageRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultLeverageRatio",
      "defaultLeverageRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  defaultRebalanceWorth(): BigInt {
    let result = super.call(
      "defaultRebalanceWorth",
      "defaultRebalanceWorth():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_defaultRebalanceWorth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultRebalanceWorth",
      "defaultRebalanceWorth():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegateCallSwap(data: Bytes): Bytes {
    let result = super.call(
      "delegateCallSwap",
      "delegateCallSwap(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );

    return result[0].toBytes();
  }

  try_delegateCallSwap(data: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "delegateCallSwap",
      "delegateCallSwap(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  feeAddress(): Address {
    let result = super.call("feeAddress", "feeAddress():(address)", []);

    return result[0].toAddress();
  }

  try_feeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeAddress", "feeAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentLeverageRate(): leveragePool__getCurrentLeverageRateResult {
    let result = super.call(
      "getCurrentLeverageRate",
      "getCurrentLeverageRate():(uint256,uint256)",
      []
    );

    return new leveragePool__getCurrentLeverageRateResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getCurrentLeverageRate(): ethereum.CallResult<
    leveragePool__getCurrentLeverageRateResult
  > {
    let result = super.tryCall(
      "getCurrentLeverageRate",
      "getCurrentLeverageRate():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new leveragePool__getCurrentLeverageRateResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getEnableRebalanceAndLiquidate(): leveragePool__getEnableRebalanceAndLiquidateResult {
    let result = super.call(
      "getEnableRebalanceAndLiquidate",
      "getEnableRebalanceAndLiquidate():(bool,bool)",
      []
    );

    return new leveragePool__getEnableRebalanceAndLiquidateResult(
      result[0].toBoolean(),
      result[1].toBoolean()
    );
  }

  try_getEnableRebalanceAndLiquidate(): ethereum.CallResult<
    leveragePool__getEnableRebalanceAndLiquidateResult
  > {
    let result = super.tryCall(
      "getEnableRebalanceAndLiquidate",
      "getEnableRebalanceAndLiquidate():(bool,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new leveragePool__getEnableRebalanceAndLiquidateResult(
        value[0].toBoolean(),
        value[1].toBoolean()
      )
    );
  }

  getHedgeInfo(): leveragePool__getHedgeInfoResult {
    let result = super.call(
      "getHedgeInfo",
      "getHedgeInfo():(address,address,address,uint256,uint256)",
      []
    );

    return new leveragePool__getHedgeInfoResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getHedgeInfo(): ethereum.CallResult<leveragePool__getHedgeInfoResult> {
    let result = super.tryCall(
      "getHedgeInfo",
      "getHedgeInfo():(address,address,address,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new leveragePool__getHedgeInfoResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getLeverageInfo(): leveragePool__getLeverageInfoResult {
    let result = super.call(
      "getLeverageInfo",
      "getLeverageInfo():(address,address,address,uint256,uint256)",
      []
    );

    return new leveragePool__getLeverageInfoResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getLeverageInfo(): ethereum.CallResult<
    leveragePool__getLeverageInfoResult
  > {
    let result = super.tryCall(
      "getLeverageInfo",
      "getLeverageInfo():(address,address,address,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new leveragePool__getLeverageInfoResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getLeverageRebase(): leveragePool__getLeverageRebaseResult {
    let result = super.call(
      "getLeverageRebase",
      "getLeverageRebase():(bool,bool)",
      []
    );

    return new leveragePool__getLeverageRebaseResult(
      result[0].toBoolean(),
      result[1].toBoolean()
    );
  }

  try_getLeverageRebase(): ethereum.CallResult<
    leveragePool__getLeverageRebaseResult
  > {
    let result = super.tryCall(
      "getLeverageRebase",
      "getLeverageRebase():(bool,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new leveragePool__getLeverageRebaseResult(
        value[0].toBoolean(),
        value[1].toBoolean()
      )
    );
  }

  getMultiSignatureAddress(): Address {
    let result = super.call(
      "getMultiSignatureAddress",
      "getMultiSignatureAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getMultiSignatureAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMultiSignatureAddress",
      "getMultiSignatureAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOperator(index: BigInt): Address {
    let result = super.call("getOperator", "getOperator(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toAddress();
  }

  try_getOperator(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOperator",
      "getOperator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOracleAddress(): Address {
    let result = super.call(
      "getOracleAddress",
      "getOracleAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getOracleAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOracleAddress",
      "getOracleAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenNetworths(): leveragePool__getTokenNetworthsResult {
    let result = super.call(
      "getTokenNetworths",
      "getTokenNetworths():(uint256,uint256)",
      []
    );

    return new leveragePool__getTokenNetworthsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getTokenNetworths(): ethereum.CallResult<
    leveragePool__getTokenNetworthsResult
  > {
    let result = super.tryCall(
      "getTokenNetworths",
      "getTokenNetworths():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new leveragePool__getTokenNetworthsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getTotalworths(): leveragePool__getTotalworthsResult {
    let result = super.call(
      "getTotalworths",
      "getTotalworths():(uint256,uint256)",
      []
    );

    return new leveragePool__getTotalworthsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getTotalworths(): ethereum.CallResult<
    leveragePool__getTotalworthsResult
  > {
    let result = super.tryCall(
      "getTotalworths",
      "getTotalworths():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new leveragePool__getTotalworthsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getUnderlyingPriceView(): Array<BigInt> {
    let result = super.call(
      "getUnderlyingPriceView",
      "getUnderlyingPriceView():(uint256[2])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getUnderlyingPriceView(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUnderlyingPriceView",
      "getUnderlyingPriceView():(uint256[2])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  implementationVersion(): BigInt {
    let result = super.call(
      "implementationVersion",
      "implementationVersion():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_implementationVersion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "implementationVersion",
      "implementationVersion():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidateThreshold(): BigInt {
    let result = super.call(
      "liquidateThreshold",
      "liquidateThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidateThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidateThreshold",
      "liquidateThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerExpiredTime(): BigInt {
    let result = super.call(
      "ownerExpiredTime",
      "ownerExpiredTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ownerExpiredTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownerExpiredTime",
      "ownerExpiredTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  phxSwapLib(): Address {
    let result = super.call("phxSwapLib", "phxSwapLib():(address)", []);

    return result[0].toAddress();
  }

  try_phxSwapLib(): ethereum.CallResult<Address> {
    let result = super.tryCall("phxSwapLib", "phxSwapLib():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rebalanceFee(): BigInt {
    let result = super.call("rebalanceFee", "rebalanceFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rebalanceFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rebalanceFee", "rebalanceFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebalancePrices(param0: BigInt): BigInt {
    let result = super.call(
      "rebalancePrices",
      "rebalancePrices(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_rebalancePrices(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rebalancePrices",
      "rebalancePrices(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebalanceTol(): BigInt {
    let result = super.call("rebalanceTol", "rebalanceTol():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rebalanceTol(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rebalanceTol", "rebalanceTol():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebaseThreshold(): BigInt {
    let result = super.call(
      "rebaseThreshold",
      "rebaseThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rebaseThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rebaseThreshold",
      "rebaseThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellFee(): BigInt {
    let result = super.call("sellFee", "sellFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sellFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sellFee", "sellFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapRouter(): Address {
    let result = super.call("swapRouter", "swapRouter():(address)", []);

    return result[0].toAddress();
  }

  try_swapRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("swapRouter", "swapRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  txOrigin(): Address {
    let result = super.call("txOrigin", "txOrigin():(address)", []);

    return result[0].toAddress();
  }

  try_txOrigin(): ethereum.CallResult<Address> {
    let result = super.tryCall("txOrigin", "txOrigin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get multiSignature(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class BuyHedgeCall extends ethereum.Call {
  get inputs(): BuyHedgeCall__Inputs {
    return new BuyHedgeCall__Inputs(this);
  }

  get outputs(): BuyHedgeCall__Outputs {
    return new BuyHedgeCall__Outputs(this);
  }
}

export class BuyHedgeCall__Inputs {
  _call: BuyHedgeCall;

  constructor(call: BuyHedgeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadLine(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class BuyHedgeCall__Outputs {
  _call: BuyHedgeCall;

  constructor(call: BuyHedgeCall) {
    this._call = call;
  }
}

export class BuyHedge2Call extends ethereum.Call {
  get inputs(): BuyHedge2Call__Inputs {
    return new BuyHedge2Call__Inputs(this);
  }

  get outputs(): BuyHedge2Call__Outputs {
    return new BuyHedge2Call__Outputs(this);
  }
}

export class BuyHedge2Call__Inputs {
  _call: BuyHedge2Call;

  constructor(call: BuyHedge2Call) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadLine(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class BuyHedge2Call__Outputs {
  _call: BuyHedge2Call;

  constructor(call: BuyHedge2Call) {
    this._call = call;
  }
}

export class BuyLeverageCall extends ethereum.Call {
  get inputs(): BuyLeverageCall__Inputs {
    return new BuyLeverageCall__Inputs(this);
  }

  get outputs(): BuyLeverageCall__Outputs {
    return new BuyLeverageCall__Outputs(this);
  }
}

export class BuyLeverageCall__Inputs {
  _call: BuyLeverageCall;

  constructor(call: BuyLeverageCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadLine(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class BuyLeverageCall__Outputs {
  _call: BuyLeverageCall;

  constructor(call: BuyLeverageCall) {
    this._call = call;
  }
}

export class BuyLeverage2Call extends ethereum.Call {
  get inputs(): BuyLeverage2Call__Inputs {
    return new BuyLeverage2Call__Inputs(this);
  }

  get outputs(): BuyLeverage2Call__Outputs {
    return new BuyLeverage2Call__Outputs(this);
  }
}

export class BuyLeverage2Call__Inputs {
  _call: BuyLeverage2Call;

  constructor(call: BuyLeverage2Call) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadLine(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class BuyLeverage2Call__Outputs {
  _call: BuyLeverage2Call;

  constructor(call: BuyLeverage2Call) {
    this._call = call;
  }
}

export class DelegateCallSwapCall extends ethereum.Call {
  get inputs(): DelegateCallSwapCall__Inputs {
    return new DelegateCallSwapCall__Inputs(this);
  }

  get outputs(): DelegateCallSwapCall__Outputs {
    return new DelegateCallSwapCall__Outputs(this);
  }
}

export class DelegateCallSwapCall__Inputs {
  _call: DelegateCallSwapCall;

  constructor(call: DelegateCallSwapCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class DelegateCallSwapCall__Outputs {
  _call: DelegateCallSwapCall;

  constructor(call: DelegateCallSwapCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RebalanceCall extends ethereum.Call {
  get inputs(): RebalanceCall__Inputs {
    return new RebalanceCall__Inputs(this);
  }

  get outputs(): RebalanceCall__Outputs {
    return new RebalanceCall__Outputs(this);
  }
}

export class RebalanceCall__Inputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RebalanceCall__Outputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RebalanceAndLiquidateCall extends ethereum.Call {
  get inputs(): RebalanceAndLiquidateCall__Inputs {
    return new RebalanceAndLiquidateCall__Inputs(this);
  }

  get outputs(): RebalanceAndLiquidateCall__Outputs {
    return new RebalanceAndLiquidateCall__Outputs(this);
  }
}

export class RebalanceAndLiquidateCall__Inputs {
  _call: RebalanceAndLiquidateCall;

  constructor(call: RebalanceAndLiquidateCall) {
    this._call = call;
  }
}

export class RebalanceAndLiquidateCall__Outputs {
  _call: RebalanceAndLiquidateCall;

  constructor(call: RebalanceAndLiquidateCall) {
    this._call = call;
  }
}

export class SellHedgeCall extends ethereum.Call {
  get inputs(): SellHedgeCall__Inputs {
    return new SellHedgeCall__Inputs(this);
  }

  get outputs(): SellHedgeCall__Outputs {
    return new SellHedgeCall__Outputs(this);
  }
}

export class SellHedgeCall__Inputs {
  _call: SellHedgeCall;

  constructor(call: SellHedgeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadLine(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SellHedgeCall__Outputs {
  _call: SellHedgeCall;

  constructor(call: SellHedgeCall) {
    this._call = call;
  }
}

export class SellHedge2Call extends ethereum.Call {
  get inputs(): SellHedge2Call__Inputs {
    return new SellHedge2Call__Inputs(this);
  }

  get outputs(): SellHedge2Call__Outputs {
    return new SellHedge2Call__Outputs(this);
  }
}

export class SellHedge2Call__Inputs {
  _call: SellHedge2Call;

  constructor(call: SellHedge2Call) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadLine(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SellHedge2Call__Outputs {
  _call: SellHedge2Call;

  constructor(call: SellHedge2Call) {
    this._call = call;
  }
}

export class SellLeverageCall extends ethereum.Call {
  get inputs(): SellLeverageCall__Inputs {
    return new SellLeverageCall__Inputs(this);
  }

  get outputs(): SellLeverageCall__Outputs {
    return new SellLeverageCall__Outputs(this);
  }
}

export class SellLeverageCall__Inputs {
  _call: SellLeverageCall;

  constructor(call: SellLeverageCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadLine(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SellLeverageCall__Outputs {
  _call: SellLeverageCall;

  constructor(call: SellLeverageCall) {
    this._call = call;
  }
}

export class SellLeverage2Call extends ethereum.Call {
  get inputs(): SellLeverage2Call__Inputs {
    return new SellLeverage2Call__Inputs(this);
  }

  get outputs(): SellLeverage2Call__Outputs {
    return new SellLeverage2Call__Outputs(this);
  }
}

export class SellLeverage2Call__Inputs {
  _call: SellLeverage2Call;

  constructor(call: SellLeverage2Call) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadLine(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SellLeverage2Call__Outputs {
  _call: SellLeverage2Call;

  constructor(call: SellLeverage2Call) {
    this._call = call;
  }
}

export class SetFeeAddressCall extends ethereum.Call {
  get inputs(): SetFeeAddressCall__Inputs {
    return new SetFeeAddressCall__Inputs(this);
  }

  get outputs(): SetFeeAddressCall__Outputs {
    return new SetFeeAddressCall__Outputs(this);
  }
}

export class SetFeeAddressCall__Inputs {
  _call: SetFeeAddressCall;

  constructor(call: SetFeeAddressCall) {
    this._call = call;
  }

  get addrFee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeAddressCall__Outputs {
  _call: SetFeeAddressCall;

  constructor(call: SetFeeAddressCall) {
    this._call = call;
  }
}

export class SetLeverageFeeCall extends ethereum.Call {
  get inputs(): SetLeverageFeeCall__Inputs {
    return new SetLeverageFeeCall__Inputs(this);
  }

  get outputs(): SetLeverageFeeCall__Outputs {
    return new SetLeverageFeeCall__Outputs(this);
  }
}

export class SetLeverageFeeCall__Inputs {
  _call: SetLeverageFeeCall;

  constructor(call: SetLeverageFeeCall) {
    this._call = call;
  }

  get _buyFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _sellFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _rebalanceFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetLeverageFeeCall__Outputs {
  _call: SetLeverageFeeCall;

  constructor(call: SetLeverageFeeCall) {
    this._call = call;
  }
}

export class SetLeveragePoolInfoCall extends ethereum.Call {
  get inputs(): SetLeveragePoolInfoCall__Inputs {
    return new SetLeveragePoolInfoCall__Inputs(this);
  }

  get outputs(): SetLeveragePoolInfoCall__Outputs {
    return new SetLeveragePoolInfoCall__Outputs(this);
  }
}

export class SetLeveragePoolInfoCall__Inputs {
  _call: SetLeveragePoolInfoCall;

  constructor(call: SetLeveragePoolInfoCall) {
    this._call = call;
  }

  get _feeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get leveragePool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get hedgePool(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get oracle(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _swapRouter(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get swaplib(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get rebaseTokenA(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get rebaseTokenB(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get fees(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _threshold(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get rebaseWorth(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }
}

export class SetLeveragePoolInfoCall__Outputs {
  _call: SetLeveragePoolInfoCall;

  constructor(call: SetLeveragePoolInfoCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetOracleAddressCall extends ethereum.Call {
  get inputs(): SetOracleAddressCall__Inputs {
    return new SetOracleAddressCall__Inputs(this);
  }

  get outputs(): SetOracleAddressCall__Outputs {
    return new SetOracleAddressCall__Outputs(this);
  }
}

export class SetOracleAddressCall__Inputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }

  get oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleAddressCall__Outputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }
}

export class SetSwapLibAddressCall extends ethereum.Call {
  get inputs(): SetSwapLibAddressCall__Inputs {
    return new SetSwapLibAddressCall__Inputs(this);
  }

  get outputs(): SetSwapLibAddressCall__Outputs {
    return new SetSwapLibAddressCall__Outputs(this);
  }
}

export class SetSwapLibAddressCall__Inputs {
  _call: SetSwapLibAddressCall;

  constructor(call: SetSwapLibAddressCall) {
    this._call = call;
  }

  get _swapLib(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSwapLibAddressCall__Outputs {
  _call: SetSwapLibAddressCall;

  constructor(call: SetSwapLibAddressCall) {
    this._call = call;
  }
}

export class SetSwapRouterAddressCall extends ethereum.Call {
  get inputs(): SetSwapRouterAddressCall__Inputs {
    return new SetSwapRouterAddressCall__Inputs(this);
  }

  get outputs(): SetSwapRouterAddressCall__Outputs {
    return new SetSwapRouterAddressCall__Outputs(this);
  }
}

export class SetSwapRouterAddressCall__Inputs {
  _call: SetSwapRouterAddressCall;

  constructor(call: SetSwapRouterAddressCall) {
    this._call = call;
  }

  get _swapRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSwapRouterAddressCall__Outputs {
  _call: SetSwapRouterAddressCall;

  constructor(call: SetSwapRouterAddressCall) {
    this._call = call;
  }
}

export class TransferOriginCall extends ethereum.Call {
  get inputs(): TransferOriginCall__Inputs {
    return new TransferOriginCall__Inputs(this);
  }

  get outputs(): TransferOriginCall__Outputs {
    return new TransferOriginCall__Outputs(this);
  }
}

export class TransferOriginCall__Inputs {
  _call: TransferOriginCall;

  constructor(call: TransferOriginCall) {
    this._call = call;
  }

  get _newOrigin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOriginCall__Outputs {
  _call: TransferOriginCall;

  constructor(call: TransferOriginCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateCall extends ethereum.Call {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}
