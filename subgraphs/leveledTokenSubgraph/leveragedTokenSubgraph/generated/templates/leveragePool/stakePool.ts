// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Borrow extends ethereum.Event {
  get params(): Borrow__Params {
    return new Borrow__Params(this);
  }
}

export class Borrow__Params {
  _event: Borrow;

  constructor(event: Borrow) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get reply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get loan(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Interest extends ethereum.Event {
  get params(): Interest__Params {
    return new Interest__Params(this);
  }
}

export class Interest__Params {
  _event: Interest;

  constructor(event: Interest) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get interest(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OperatorTransferred extends ethereum.Event {
  get params(): OperatorTransferred__Params {
    return new OperatorTransferred__Params(this);
  }
}

export class OperatorTransferred__Params {
  _event: OperatorTransferred;

  constructor(event: OperatorTransferred) {
    this._event = event;
  }

  get previousOperator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOperator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OriginTransferred extends ethereum.Event {
  get params(): OriginTransferred__Params {
    return new OriginTransferred__Params(this);
  }
}

export class OriginTransferred__Params {
  _event: OriginTransferred;

  constructor(event: OriginTransferred) {
    this._event = event;
  }

  get previousOrigin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOrigin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get recieptor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Repay extends ethereum.Event {
  get params(): Repay__Params {
    return new Repay__Params(this);
  }
}

export class Repay__Params {
  _event: Repay;

  constructor(event: Repay) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get leftLoan(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Stake extends ethereum.Event {
  get params(): Stake__Params {
    return new Stake__Params(this);
  }
}

export class Stake__Params {
  _event: Stake;

  constructor(event: Stake) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get mintAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Unstake extends ethereum.Event {
  get params(): Unstake__Params {
    return new Unstake__Params(this);
  }
}

export class Unstake__Params {
  _event: Unstake;

  constructor(event: Unstake) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get burnAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class stakePool extends ethereum.SmartContract {
  static bind(address: Address): stakePool {
    return new stakePool("stakePool", address);
  }

  PPTTotalSuply(): BigInt {
    let result = super.call("PPTTotalSuply", "PPTTotalSuply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PPTTotalSuply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PPTTotalSuply",
      "PPTTotalSuply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addressPermission(param0: Address): BigInt {
    let result = super.call(
      "addressPermission",
      "addressPermission(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_addressPermission(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addressPermission",
      "addressPermission(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowBorrow(): BigInt {
    let result = super.call("allowBorrow", "allowBorrow():(uint256)", []);

    return result[0].toBigInt();
  }

  try_allowBorrow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("allowBorrow", "allowBorrow():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowRepay(): BigInt {
    let result = super.call("allowRepay", "allowRepay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_allowRepay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("allowRepay", "allowRepay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrow(amount: BigInt): BigInt {
    let result = super.call("borrow", "borrow(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_borrow(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("borrow", "borrow(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowLimit(account: Address): BigInt {
    let result = super.call("borrowLimit", "borrowLimit(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_borrowLimit(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowLimit",
      "borrowLimit(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkAddressPermission(tmpAddress: Address, state: BigInt): boolean {
    let result = super.call(
      "checkAddressPermission",
      "checkAddressPermission(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(tmpAddress),
        ethereum.Value.fromUnsignedBigInt(state)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkAddressPermission(
    tmpAddress: Address,
    state: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkAddressPermission",
      "checkAddressPermission(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(tmpAddress),
        ethereum.Value.fromUnsignedBigInt(state)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getMultiSignatureAddress(): Address {
    let result = super.call(
      "getMultiSignatureAddress",
      "getMultiSignatureAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getMultiSignatureAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMultiSignatureAddress",
      "getMultiSignatureAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOperator(index: BigInt): Address {
    let result = super.call("getOperator", "getOperator(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toAddress();
  }

  try_getOperator(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOperator",
      "getOperator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPPTCoinAddress(): Address {
    let result = super.call(
      "getPPTCoinAddress",
      "getPPTCoinAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getPPTCoinAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPPTCoinAddress",
      "getPPTCoinAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementationVersion(): BigInt {
    let result = super.call(
      "implementationVersion",
      "implementationVersion():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_implementationVersion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "implementationVersion",
      "implementationVersion():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestRate(): BigInt {
    let result = super.call("interestRate", "interestRate():(uint64)", []);

    return result[0].toBigInt();
  }

  try_interestRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("interestRate", "interestRate():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  loan(account: Address): BigInt {
    let result = super.call("loan", "loan(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_loan(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("loan", "loan(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerExpiredTime(): BigInt {
    let result = super.call(
      "ownerExpiredTime",
      "ownerExpiredTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ownerExpiredTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownerExpiredTime",
      "ownerExpiredTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolBalance(): BigInt {
    let result = super.call("poolBalance", "poolBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolBalance", "poolBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolInterest(): BigInt {
    let result = super.call("poolInterest", "poolInterest():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolInterest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolInterest", "poolInterest():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolToken(): Address {
    let result = super.call("poolToken", "poolToken():(address)", []);

    return result[0].toAddress();
  }

  try_poolToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolToken", "poolToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenNetworth(): BigInt {
    let result = super.call("tokenNetworth", "tokenNetworth():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenNetworth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenNetworth",
      "tokenNetworth():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  txOrigin(): Address {
    let result = super.call("txOrigin", "txOrigin():(address)", []);

    return result[0].toAddress();
  }

  try_txOrigin(): ethereum.CallResult<Address> {
    let result = super.tryCall("txOrigin", "txOrigin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get multiSignature(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BorrowAndInterestCall extends ethereum.Call {
  get inputs(): BorrowAndInterestCall__Inputs {
    return new BorrowAndInterestCall__Inputs(this);
  }

  get outputs(): BorrowAndInterestCall__Outputs {
    return new BorrowAndInterestCall__Outputs(this);
  }
}

export class BorrowAndInterestCall__Inputs {
  _call: BorrowAndInterestCall;

  constructor(call: BorrowAndInterestCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BorrowAndInterestCall__Outputs {
  _call: BorrowAndInterestCall;

  constructor(call: BorrowAndInterestCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InterestInflationCall extends ethereum.Call {
  get inputs(): InterestInflationCall__Inputs {
    return new InterestInflationCall__Inputs(this);
  }

  get outputs(): InterestInflationCall__Outputs {
    return new InterestInflationCall__Outputs(this);
  }
}

export class InterestInflationCall__Inputs {
  _call: InterestInflationCall;

  constructor(call: InterestInflationCall) {
    this._call = call;
  }

  get inflation(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InterestInflationCall__Outputs {
  _call: InterestInflationCall;

  constructor(call: InterestInflationCall) {
    this._call = call;
  }
}

export class ModifyPermissionCall extends ethereum.Call {
  get inputs(): ModifyPermissionCall__Inputs {
    return new ModifyPermissionCall__Inputs(this);
  }

  get outputs(): ModifyPermissionCall__Outputs {
    return new ModifyPermissionCall__Outputs(this);
  }
}

export class ModifyPermissionCall__Inputs {
  _call: ModifyPermissionCall;

  constructor(call: ModifyPermissionCall) {
    this._call = call;
  }

  get addAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get permission(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ModifyPermissionCall__Outputs {
  _call: ModifyPermissionCall;

  constructor(call: ModifyPermissionCall) {
    this._call = call;
  }
}

export class RenounceOriginCall extends ethereum.Call {
  get inputs(): RenounceOriginCall__Inputs {
    return new RenounceOriginCall__Inputs(this);
  }

  get outputs(): RenounceOriginCall__Outputs {
    return new RenounceOriginCall__Outputs(this);
  }
}

export class RenounceOriginCall__Inputs {
  _call: RenounceOriginCall;

  constructor(call: RenounceOriginCall) {
    this._call = call;
  }
}

export class RenounceOriginCall__Outputs {
  _call: RenounceOriginCall;

  constructor(call: RenounceOriginCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bAll(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class RepayAndInterestCall extends ethereum.Call {
  get inputs(): RepayAndInterestCall__Inputs {
    return new RepayAndInterestCall__Inputs(this);
  }

  get outputs(): RepayAndInterestCall__Outputs {
    return new RepayAndInterestCall__Outputs(this);
  }
}

export class RepayAndInterestCall__Inputs {
  _call: RepayAndInterestCall;

  constructor(call: RepayAndInterestCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayAndInterestCall__Outputs {
  _call: RepayAndInterestCall;

  constructor(call: RepayAndInterestCall) {
    this._call = call;
  }
}

export class SetHaltCall extends ethereum.Call {
  get inputs(): SetHaltCall__Inputs {
    return new SetHaltCall__Inputs(this);
  }

  get outputs(): SetHaltCall__Outputs {
    return new SetHaltCall__Outputs(this);
  }
}

export class SetHaltCall__Inputs {
  _call: SetHaltCall;

  constructor(call: SetHaltCall) {
    this._call = call;
  }

  get halt(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetHaltCall__Outputs {
  _call: SetHaltCall;

  constructor(call: SetHaltCall) {
    this._call = call;
  }
}

export class SetInterestRateCall extends ethereum.Call {
  get inputs(): SetInterestRateCall__Inputs {
    return new SetInterestRateCall__Inputs(this);
  }

  get outputs(): SetInterestRateCall__Outputs {
    return new SetInterestRateCall__Outputs(this);
  }
}

export class SetInterestRateCall__Inputs {
  _call: SetInterestRateCall;

  constructor(call: SetInterestRateCall) {
    this._call = call;
  }

  get interestrate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetInterestRateCall__Outputs {
  _call: SetInterestRateCall;

  constructor(call: SetInterestRateCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetPPTCoinAddressCall extends ethereum.Call {
  get inputs(): SetPPTCoinAddressCall__Inputs {
    return new SetPPTCoinAddressCall__Inputs(this);
  }

  get outputs(): SetPPTCoinAddressCall__Outputs {
    return new SetPPTCoinAddressCall__Outputs(this);
  }
}

export class SetPPTCoinAddressCall__Inputs {
  _call: SetPPTCoinAddressCall;

  constructor(call: SetPPTCoinAddressCall) {
    this._call = call;
  }

  get PPTCoinAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPPTCoinAddressCall__Outputs {
  _call: SetPPTCoinAddressCall;

  constructor(call: SetPPTCoinAddressCall) {
    this._call = call;
  }
}

export class SetPoolInfoCall extends ethereum.Call {
  get inputs(): SetPoolInfoCall__Inputs {
    return new SetPoolInfoCall__Inputs(this);
  }

  get outputs(): SetPoolInfoCall__Outputs {
    return new SetPoolInfoCall__Outputs(this);
  }
}

export class SetPoolInfoCall__Inputs {
  _call: SetPoolInfoCall;

  constructor(call: SetPoolInfoCall) {
    this._call = call;
  }

  get PPTToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get stakeToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get interestrate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetPoolInfoCall__Outputs {
  _call: SetPoolInfoCall;

  constructor(call: SetPoolInfoCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferOriginCall extends ethereum.Call {
  get inputs(): TransferOriginCall__Inputs {
    return new TransferOriginCall__Inputs(this);
  }

  get outputs(): TransferOriginCall__Outputs {
    return new TransferOriginCall__Outputs(this);
  }
}

export class TransferOriginCall__Inputs {
  _call: TransferOriginCall;

  constructor(call: TransferOriginCall) {
    this._call = call;
  }

  get _newOrigin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOriginCall__Outputs {
  _call: TransferOriginCall;

  constructor(call: TransferOriginCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class UpdateCall extends ethereum.Call {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}
