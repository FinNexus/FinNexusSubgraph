// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LeveragedTokenPriceEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LeveragedTokenPriceEntity entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LeveragedTokenPriceEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LeveragedTokenPriceEntity", id.toString(), this);
  }

  static load(id: string): LeveragedTokenPriceEntity | null {
    return store.get(
      "LeveragedTokenPriceEntity",
      id
    ) as LeveragedTokenPriceEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolAddress(): Bytes {
    let value = this.get("poolAddress");
    return value.toBytes();
  }

  set poolAddress(value: Bytes) {
    this.set("poolAddress", Value.fromBytes(value));
  }

  get uptokenprice(): BigInt {
    let value = this.get("uptokenprice");
    return value.toBigInt();
  }

  set uptokenprice(value: BigInt) {
    this.set("uptokenprice", Value.fromBigInt(value));
  }

  get downtokenprice(): BigInt {
    let value = this.get("downtokenprice");
    return value.toBigInt();
  }

  set downtokenprice(value: BigInt) {
    this.set("downtokenprice", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get network(): string {
    let value = this.get("network");
    return value.toString();
  }

  set network(value: string) {
    this.set("network", Value.fromString(value));
  }
}

export class leveragePool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save leveragePool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save leveragePool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("leveragePool", id.toString(), this);
  }

  static load(id: string): leveragePool | null {
    return store.get("leveragePool", id) as leveragePool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get underlyingAddress(): Bytes {
    let value = this.get("underlyingAddress");
    return value.toBytes();
  }

  set underlyingAddress(value: Bytes) {
    this.set("underlyingAddress", Value.fromBytes(value));
  }

  get underlyingName(): string {
    let value = this.get("underlyingName");
    return value.toString();
  }

  set underlyingName(value: string) {
    this.set("underlyingName", Value.fromString(value));
  }
}

export class LeverageFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LeverageFactory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LeverageFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LeverageFactory", id.toString(), this);
  }

  static load(id: string): LeverageFactory | null {
    return store.get("LeverageFactory", id) as LeverageFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class TradeItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TradeItem entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TradeItem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TradeItem", id.toString(), this);
  }

  static load(id: string): TradeItem | null {
    return store.get("TradeItem", id) as TradeItem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get underlying(): Bytes {
    let value = this.get("underlying");
    return value.toBytes();
  }

  set underlying(value: Bytes) {
    this.set("underlying", Value.fromBytes(value));
  }

  get leveragetype(): string {
    let value = this.get("leveragetype");
    return value.toString();
  }

  set leveragetype(value: string) {
    this.set("leveragetype", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class TotalTVL extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TotalTVL entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TotalTVL entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TotalTVL", id.toString(), this);
  }

  static load(id: string): TotalTVL | null {
    return store.get("TotalTVL", id) as TotalTVL | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class TVL extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TVL entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TVL entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TVL", id.toString(), this);
  }

  static load(id: string): TVL | null {
    return store.get("TVL", id) as TVL | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get poolAddress(): Bytes {
    let value = this.get("poolAddress");
    return value.toBytes();
  }

  set poolAddress(value: Bytes) {
    this.set("poolAddress", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class InterestAPY extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save InterestAPY entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InterestAPY entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InterestAPY", id.toString(), this);
  }

  static load(id: string): InterestAPY | null {
    return store.get("InterestAPY", id) as InterestAPY | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get poolAddress(): Bytes {
    let value = this.get("poolAddress");
    return value.toBytes();
  }

  set poolAddress(value: Bytes) {
    this.set("poolAddress", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get apy(): BigInt {
    let value = this.get("apy");
    return value.toBigInt();
  }

  set apy(value: BigInt) {
    this.set("apy", Value.fromBigInt(value));
  }
}

export class TradeVol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TradeVol entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TradeVol entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TradeVol", id.toString(), this);
  }

  static load(id: string): TradeVol | null {
    return store.get("TradeVol", id) as TradeVol | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    return value.toBytes();
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get buyLeverAmount(): BigInt | null {
    let value = this.get("buyLeverAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set buyLeverAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("buyLeverAmount");
    } else {
      this.set("buyLeverAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get buyLeverValue(): BigInt | null {
    let value = this.get("buyLeverValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set buyLeverValue(value: BigInt | null) {
    if (value === null) {
      this.unset("buyLeverValue");
    } else {
      this.set("buyLeverValue", Value.fromBigInt(value as BigInt));
    }
  }

  get sellLeverAmount(): BigInt | null {
    let value = this.get("sellLeverAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sellLeverAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("sellLeverAmount");
    } else {
      this.set("sellLeverAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get sellLeverValue(): BigInt | null {
    let value = this.get("sellLeverValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sellLeverValue(value: BigInt | null) {
    if (value === null) {
      this.unset("sellLeverValue");
    } else {
      this.set("sellLeverValue", Value.fromBigInt(value as BigInt));
    }
  }

  get buyHedgeAmount(): BigInt | null {
    let value = this.get("buyHedgeAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set buyHedgeAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("buyHedgeAmount");
    } else {
      this.set("buyHedgeAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get buyHedgeValue(): BigInt | null {
    let value = this.get("buyHedgeValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set buyHedgeValue(value: BigInt | null) {
    if (value === null) {
      this.unset("buyHedgeValue");
    } else {
      this.set("buyHedgeValue", Value.fromBigInt(value as BigInt));
    }
  }

  get sellHedgeAmount(): BigInt | null {
    let value = this.get("sellHedgeAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sellHedgeAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("sellHedgeAmount");
    } else {
      this.set("sellHedgeAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get sellHedgeValue(): BigInt | null {
    let value = this.get("sellHedgeValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sellHedgeValue(value: BigInt | null) {
    if (value === null) {
      this.unset("sellHedgeValue");
    } else {
      this.set("sellHedgeValue", Value.fromBigInt(value as BigInt));
    }
  }
}

export class stakePool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save stakePool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save stakePool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("stakePool", id.toString(), this);
  }

  static load(id: string): stakePool | null {
    return store.get("stakePool", id) as stakePool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlyingAddress(): Bytes {
    let value = this.get("underlyingAddress");
    return value.toBytes();
  }

  set underlyingAddress(value: Bytes) {
    this.set("underlyingAddress", Value.fromBytes(value));
  }

  get underlyingName(): string {
    let value = this.get("underlyingName");
    return value.toString();
  }

  set underlyingName(value: string) {
    this.set("underlyingName", Value.fromString(value));
  }

  get interestrate(): BigInt {
    let value = this.get("interestrate");
    return value.toBigInt();
  }

  set interestrate(value: BigInt) {
    this.set("interestrate", Value.fromBigInt(value));
  }
}

export class Fee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Fee entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Fee entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Fee", id.toString(), this);
  }

  static load(id: string): Fee | null {
    return store.get("Fee", id) as Fee | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}
