// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class EntityLeveragePool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityLeveragePool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityLeveragePool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityLeveragePool", id.toString(), this);
  }

  static load(id: string): EntityLeveragePool | null {
    return store.get("EntityLeveragePool", id) as EntityLeveragePool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get underlyingAddress(): Bytes | null {
    let value = this.get("underlyingAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set underlyingAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("underlyingAddress");
    } else {
      this.set("underlyingAddress", Value.fromBytes(value as Bytes));
    }
  }

  get underlyingName(): string | null {
    let value = this.get("underlyingName");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set underlyingName(value: string | null) {
    if (value === null) {
      this.unset("underlyingName");
    } else {
      this.set("underlyingName", Value.fromString(value as string));
    }
  }
}

export class EntityLeverageFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save EntityLeverageFactory entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityLeverageFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityLeverageFactory", id.toString(), this);
  }

  static load(id: string): EntityLeverageFactory | null {
    return store.get(
      "EntityLeverageFactory",
      id
    ) as EntityLeverageFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class EntityTradeItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityTradeItem entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityTradeItem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityTradeItem", id.toString(), this);
  }

  static load(id: string): EntityTradeItem | null {
    return store.get("EntityTradeItem", id) as EntityTradeItem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get underlying(): Bytes {
    let value = this.get("underlying");
    return value.toBytes();
  }

  set underlying(value: Bytes) {
    this.set("underlying", Value.fromBytes(value));
  }

  get leveragetype(): string {
    let value = this.get("leveragetype");
    return value.toString();
  }

  set leveragetype(value: string) {
    this.set("leveragetype", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class EntityTotalTVL extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityTotalTVL entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityTotalTVL entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityTotalTVL", id.toString(), this);
  }

  static load(id: string): EntityTotalTVL | null {
    return store.get("EntityTotalTVL", id) as EntityTotalTVL | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class EntityTVL extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityTVL entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityTVL entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityTVL", id.toString(), this);
  }

  static load(id: string): EntityTVL | null {
    return store.get("EntityTVL", id) as EntityTVL | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get poolAddress(): Bytes {
    let value = this.get("poolAddress");
    return value.toBytes();
  }

  set poolAddress(value: Bytes) {
    this.set("poolAddress", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class EntityInterestAPY extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityInterestAPY entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityInterestAPY entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityInterestAPY", id.toString(), this);
  }

  static load(id: string): EntityInterestAPY | null {
    return store.get("EntityInterestAPY", id) as EntityInterestAPY | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get poolAddress(): Bytes | null {
    let value = this.get("poolAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set poolAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("poolAddress");
    } else {
      this.set("poolAddress", Value.fromBytes(value as Bytes));
    }
  }

  get token(): Bytes | null {
    let value = this.get("token");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (value === null) {
      this.unset("token");
    } else {
      this.set("token", Value.fromBytes(value as Bytes));
    }
  }

  get apy(): BigInt | null {
    let value = this.get("apy");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set apy(value: BigInt | null) {
    if (value === null) {
      this.unset("apy");
    } else {
      this.set("apy", Value.fromBigInt(value as BigInt));
    }
  }
}

export class EntityTradeVol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityTradeVol entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityTradeVol entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityTradeVol", id.toString(), this);
  }

  static load(id: string): EntityTradeVol | null {
    return store.get("EntityTradeVol", id) as EntityTradeVol | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    return value.toBytes();
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get buyLeverAmount(): BigInt | null {
    let value = this.get("buyLeverAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set buyLeverAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("buyLeverAmount");
    } else {
      this.set("buyLeverAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get buyLeverValue(): BigInt | null {
    let value = this.get("buyLeverValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set buyLeverValue(value: BigInt | null) {
    if (value === null) {
      this.unset("buyLeverValue");
    } else {
      this.set("buyLeverValue", Value.fromBigInt(value as BigInt));
    }
  }

  get sellLeverAmount(): BigInt | null {
    let value = this.get("sellLeverAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sellLeverAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("sellLeverAmount");
    } else {
      this.set("sellLeverAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get sellLeverValue(): BigInt | null {
    let value = this.get("sellLeverValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sellLeverValue(value: BigInt | null) {
    if (value === null) {
      this.unset("sellLeverValue");
    } else {
      this.set("sellLeverValue", Value.fromBigInt(value as BigInt));
    }
  }

  get buyHedgeAmount(): BigInt | null {
    let value = this.get("buyHedgeAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set buyHedgeAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("buyHedgeAmount");
    } else {
      this.set("buyHedgeAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get buyHedgeValue(): BigInt | null {
    let value = this.get("buyHedgeValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set buyHedgeValue(value: BigInt | null) {
    if (value === null) {
      this.unset("buyHedgeValue");
    } else {
      this.set("buyHedgeValue", Value.fromBigInt(value as BigInt));
    }
  }

  get sellHedgeAmount(): BigInt | null {
    let value = this.get("sellHedgeAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sellHedgeAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("sellHedgeAmount");
    } else {
      this.set("sellHedgeAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get sellHedgeValue(): BigInt | null {
    let value = this.get("sellHedgeValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sellHedgeValue(value: BigInt | null) {
    if (value === null) {
      this.unset("sellHedgeValue");
    } else {
      this.set("sellHedgeValue", Value.fromBigInt(value as BigInt));
    }
  }
}

export class EntityStakePool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityStakePool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityStakePool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityStakePool", id.toString(), this);
  }

  static load(id: string): EntityStakePool | null {
    return store.get("EntityStakePool", id) as EntityStakePool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlyingAddress(): Bytes {
    let value = this.get("underlyingAddress");
    return value.toBytes();
  }

  set underlyingAddress(value: Bytes) {
    this.set("underlyingAddress", Value.fromBytes(value));
  }

  get underlyingName(): string {
    let value = this.get("underlyingName");
    return value.toString();
  }

  set underlyingName(value: string) {
    this.set("underlyingName", Value.fromString(value));
  }

  get interestrate(): BigInt {
    let value = this.get("interestrate");
    return value.toBigInt();
  }

  set interestrate(value: BigInt) {
    this.set("interestrate", Value.fromBigInt(value));
  }
}

export class EntityFee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityFee entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityFee entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityFee", id.toString(), this);
  }

  static load(id: string): EntityFee | null {
    return store.get("EntityFee", id) as EntityFee | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}
