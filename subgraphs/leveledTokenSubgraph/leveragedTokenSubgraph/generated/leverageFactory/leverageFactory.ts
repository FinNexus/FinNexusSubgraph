// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CreateLeveragePool extends ethereum.Event {
  get params(): CreateLeveragePool__Params {
    return new CreateLeveragePool__Params(this);
  }
}

export class CreateLeveragePool__Params {
  _event: CreateLeveragePool;

  constructor(event: CreateLeveragePool) {
    this._event = event;
  }

  get leveragePool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenA(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenB(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get leverageRatio(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get leverageRebaseWorth(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CreateStakePool extends ethereum.Event {
  get params(): CreateStakePool__Params {
    return new CreateStakePool__Params(this);
  }
}

export class CreateStakePool__Params {
  _event: CreateStakePool;

  constructor(event: CreateStakePool) {
    this._event = event;
  }

  get stakePool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get interestrate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OperatorTransferred extends ethereum.Event {
  get params(): OperatorTransferred__Params {
    return new OperatorTransferred__Params(this);
  }
}

export class OperatorTransferred__Params {
  _event: OperatorTransferred;

  constructor(event: OperatorTransferred) {
    this._event = event;
  }

  get previousOperator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOperator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OriginTransferred extends ethereum.Event {
  get params(): OriginTransferred__Params {
    return new OriginTransferred__Params(this);
  }
}

export class OriginTransferred__Params {
  _event: OriginTransferred;

  constructor(event: OriginTransferred) {
    this._event = event;
  }

  get previousOrigin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOrigin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class leverageFactory__getLeveragePoolResult {
  value0: Address;
  value1: Address;
  value2: Address;

  constructor(value0: Address, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }
}

export class leverageFactory extends ethereum.SmartContract {
  static bind(address: Address): leverageFactory {
    return new leverageFactory("leverageFactory", address);
  }

  LeveragePoolID(): BigInt {
    let result = super.call("LeveragePoolID", "LeveragePoolID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_LeveragePoolID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LeveragePoolID",
      "LeveragePoolID():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MinePoolID(): BigInt {
    let result = super.call("MinePoolID", "MinePoolID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MinePoolID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MinePoolID", "MinePoolID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PPTTimeLimit(): BigInt {
    let result = super.call("PPTTimeLimit", "PPTTimeLimit():(uint32)", []);

    return result[0].toBigInt();
  }

  try_PPTTimeLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PPTTimeLimit", "PPTTimeLimit():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PPTTokenID(): BigInt {
    let result = super.call("PPTTokenID", "PPTTokenID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PPTTokenID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PPTTokenID", "PPTTokenID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseCoinName(): string {
    let result = super.call("baseCoinName", "baseCoinName():(string)", []);

    return result[0].toString();
  }

  try_baseCoinName(): ethereum.CallResult<string> {
    let result = super.tryCall("baseCoinName", "baseCoinName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  buyFee(): BigInt {
    let result = super.call("buyFee", "buyFee():(uint64)", []);

    return result[0].toBigInt();
  }

  try_buyFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("buyFee", "buyFee():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createLeveragePool(
    tokenA: Address,
    tokenB: Address,
    leverageRatio: BigInt,
    leverageRebaseWorth: BigInt
  ): Address {
    let result = super.call(
      "createLeveragePool",
      "createLeveragePool(address,address,uint64,uint256):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(leverageRatio),
        ethereum.Value.fromUnsignedBigInt(leverageRebaseWorth)
      ]
    );

    return result[0].toAddress();
  }

  try_createLeveragePool(
    tokenA: Address,
    tokenB: Address,
    leverageRatio: BigInt,
    leverageRebaseWorth: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createLeveragePool",
      "createLeveragePool(address,address,uint64,uint256):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(leverageRatio),
        ethereum.Value.fromUnsignedBigInt(leverageRebaseWorth)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createStatePool(token: Address, _interestrate: BigInt): Address {
    let result = super.call(
      "createStatePool",
      "createStatePool(address,uint64):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(_interestrate)
      ]
    );

    return result[0].toAddress();
  }

  try_createStatePool(
    token: Address,
    _interestrate: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createStatePool",
      "createStatePool(address,uint64):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(_interestrate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeAddress(): Address {
    let result = super.call("feeAddress", "feeAddress():(address)", []);

    return result[0].toAddress();
  }

  try_feeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeAddress", "feeAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllLeveragePool(): Array<Address> {
    let result = super.call(
      "getAllLeveragePool",
      "getAllLeveragePool():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllLeveragePool(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllLeveragePool",
      "getAllLeveragePool():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAllStakePool(): Array<Address> {
    let result = super.call(
      "getAllStakePool",
      "getAllStakePool():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllStakePool(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllStakePool",
      "getAllStakePool():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getLeveragePool(
    tokenA: Address,
    tokenB: Address,
    leverageRatio: BigInt
  ): leverageFactory__getLeveragePoolResult {
    let result = super.call(
      "getLeveragePool",
      "getLeveragePool(address,address,uint256):(address,address,address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(leverageRatio)
      ]
    );

    return new leverageFactory__getLeveragePoolResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_getLeveragePool(
    tokenA: Address,
    tokenB: Address,
    leverageRatio: BigInt
  ): ethereum.CallResult<leverageFactory__getLeveragePoolResult> {
    let result = super.tryCall(
      "getLeveragePool",
      "getLeveragePool(address,address,uint256):(address,address,address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(leverageRatio)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new leverageFactory__getLeveragePoolResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  getMultiSignatureAddress(): Address {
    let result = super.call(
      "getMultiSignatureAddress",
      "getMultiSignatureAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getMultiSignatureAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMultiSignatureAddress",
      "getMultiSignatureAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOperator(index: BigInt): Address {
    let result = super.call("getOperator", "getOperator(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toAddress();
  }

  try_getOperator(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOperator",
      "getOperator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStakePool(token: Address): Address {
    let result = super.call("getStakePool", "getStakePool(address):(address)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toAddress();
  }

  try_getStakePool(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getStakePool",
      "getStakePool(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementationVersion(): BigInt {
    let result = super.call(
      "implementationVersion",
      "implementationVersion():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_implementationVersion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "implementationVersion",
      "implementationVersion():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestInflation(): BigInt {
    let result = super.call(
      "interestInflation",
      "interestInflation():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_interestInflation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestInflation",
      "interestInflation():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastRebalance(): BigInt {
    let result = super.call("lastRebalance", "lastRebalance():(uint64)", []);

    return result[0].toBigInt();
  }

  try_lastRebalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastRebalance", "lastRebalance():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  leveragePoolMap(param0: Bytes): Address {
    let result = super.call(
      "leveragePoolMap",
      "leveragePoolMap(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toAddress();
  }

  try_leveragePoolMap(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "leveragePoolMap",
      "leveragePoolMap(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidateThreshold(): BigInt {
    let result = super.call(
      "liquidateThreshold",
      "liquidateThreshold():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidateThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidateThreshold",
      "liquidateThreshold():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerExpiredTime(): BigInt {
    let result = super.call(
      "ownerExpiredTime",
      "ownerExpiredTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ownerExpiredTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownerExpiredTime",
      "ownerExpiredTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  phxOracle(): Address {
    let result = super.call("phxOracle", "phxOracle():(address)", []);

    return result[0].toAddress();
  }

  try_phxOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("phxOracle", "phxOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  phxSwapLib(): Address {
    let result = super.call("phxSwapLib", "phxSwapLib():(address)", []);

    return result[0].toAddress();
  }

  try_phxSwapLib(): ethereum.CallResult<Address> {
    let result = super.tryCall("phxSwapLib", "phxSwapLib():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxyinfoMap(param0: BigInt): Address {
    let result = super.call("proxyinfoMap", "proxyinfoMap(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_proxyinfoMap(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "proxyinfoMap",
      "proxyinfoMap(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rebalanceFee(): BigInt {
    let result = super.call("rebalanceFee", "rebalanceFee():(uint64)", []);

    return result[0].toBigInt();
  }

  try_rebalanceFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rebalanceFee", "rebalanceFee():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebalanceInterval(): BigInt {
    let result = super.call(
      "rebalanceInterval",
      "rebalanceInterval():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_rebalanceInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rebalanceInterval",
      "rebalanceInterval():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebasePoolID(): BigInt {
    let result = super.call("rebasePoolID", "rebasePoolID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rebasePoolID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rebasePoolID", "rebasePoolID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebaseThreshold(): BigInt {
    let result = super.call(
      "rebaseThreshold",
      "rebaseThreshold():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_rebaseThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rebaseThreshold",
      "rebaseThreshold():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebaseTimeLimit(): BigInt {
    let result = super.call(
      "rebaseTimeLimit",
      "rebaseTimeLimit():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_rebaseTimeLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rebaseTimeLimit",
      "rebaseTimeLimit():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellFee(): BigInt {
    let result = super.call("sellFee", "sellFee():(uint64)", []);

    return result[0].toBigInt();
  }

  try_sellFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sellFee", "sellFee():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakePoolID(): BigInt {
    let result = super.call("stakePoolID", "stakePoolID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_stakePoolID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stakePoolID", "stakePoolID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakePoolMap(param0: Address): Address {
    let result = super.call("stakePoolMap", "stakePoolMap(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_stakePoolMap(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakePoolMap",
      "stakePoolMap(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swapRouter(): Address {
    let result = super.call("swapRouter", "swapRouter():(address)", []);

    return result[0].toAddress();
  }

  try_swapRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("swapRouter", "swapRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  txOrigin(): Address {
    let result = super.call("txOrigin", "txOrigin():(address)", []);

    return result[0].toAddress();
  }

  try_txOrigin(): ethereum.CallResult<Address> {
    let result = super.tryCall("txOrigin", "txOrigin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vestingPool(): Address {
    let result = super.call("vestingPool", "vestingPool():(address)", []);

    return result[0].toAddress();
  }

  try_vestingPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("vestingPool", "vestingPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get multiSignature(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateLeveragePoolCall extends ethereum.Call {
  get inputs(): CreateLeveragePoolCall__Inputs {
    return new CreateLeveragePoolCall__Inputs(this);
  }

  get outputs(): CreateLeveragePoolCall__Outputs {
    return new CreateLeveragePoolCall__Outputs(this);
  }
}

export class CreateLeveragePoolCall__Inputs {
  _call: CreateLeveragePoolCall;

  constructor(call: CreateLeveragePoolCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get leverageRatio(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get leverageRebaseWorth(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateLeveragePoolCall__Outputs {
  _call: CreateLeveragePoolCall;

  constructor(call: CreateLeveragePoolCall) {
    this._call = call;
  }

  get _leveragePool(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateStatePoolCall extends ethereum.Call {
  get inputs(): CreateStatePoolCall__Inputs {
    return new CreateStatePoolCall__Inputs(this);
  }

  get outputs(): CreateStatePoolCall__Outputs {
    return new CreateStatePoolCall__Outputs(this);
  }
}

export class CreateStatePoolCall__Inputs {
  _call: CreateStatePoolCall;

  constructor(call: CreateStatePoolCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _interestrate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateStatePoolCall__Outputs {
  _call: CreateStatePoolCall;

  constructor(call: CreateStatePoolCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InitFactoryInfoCall extends ethereum.Call {
  get inputs(): InitFactoryInfoCall__Inputs {
    return new InitFactoryInfoCall__Inputs(this);
  }

  get outputs(): InitFactoryInfoCall__Outputs {
    return new InitFactoryInfoCall__Outputs(this);
  }
}

export class InitFactoryInfoCall__Inputs {
  _call: InitFactoryInfoCall;

  constructor(call: InitFactoryInfoCall) {
    this._call = call;
  }

  get _swapRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _SwapLib(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rebalanceInterval(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _buyFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _sellFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _rebalanceFee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _rebaseThreshold(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _liquidateThreshold(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _interestInflation(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class InitFactoryInfoCall__Outputs {
  _call: InitFactoryInfoCall;

  constructor(call: InitFactoryInfoCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RebalanceAllCall extends ethereum.Call {
  get inputs(): RebalanceAllCall__Inputs {
    return new RebalanceAllCall__Inputs(this);
  }

  get outputs(): RebalanceAllCall__Outputs {
    return new RebalanceAllCall__Outputs(this);
  }
}

export class RebalanceAllCall__Inputs {
  _call: RebalanceAllCall;

  constructor(call: RebalanceAllCall) {
    this._call = call;
  }
}

export class RebalanceAllCall__Outputs {
  _call: RebalanceAllCall;

  constructor(call: RebalanceAllCall) {
    this._call = call;
  }
}

export class SetFeeAddressCall extends ethereum.Call {
  get inputs(): SetFeeAddressCall__Inputs {
    return new SetFeeAddressCall__Inputs(this);
  }

  get outputs(): SetFeeAddressCall__Outputs {
    return new SetFeeAddressCall__Outputs(this);
  }
}

export class SetFeeAddressCall__Inputs {
  _call: SetFeeAddressCall;

  constructor(call: SetFeeAddressCall) {
    this._call = call;
  }

  get _feeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeAddressCall__Outputs {
  _call: SetFeeAddressCall;

  constructor(call: SetFeeAddressCall) {
    this._call = call;
  }
}

export class SetImplementAddressCall extends ethereum.Call {
  get inputs(): SetImplementAddressCall__Inputs {
    return new SetImplementAddressCall__Inputs(this);
  }

  get outputs(): SetImplementAddressCall__Outputs {
    return new SetImplementAddressCall__Outputs(this);
  }
}

export class SetImplementAddressCall__Inputs {
  _call: SetImplementAddressCall;

  constructor(call: SetImplementAddressCall) {
    this._call = call;
  }

  get _baseCoinName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _feeAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get rebaseOperator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _stakePoolImpl(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _leveragePoolImpl(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _PPTCoinImpl(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _rebaseTokenImpl(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get acceleratedMinePool(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get PHXVestingPool(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get _phxOracle(): Address {
    return this._call.inputValues[9].value.toAddress();
  }
}

export class SetImplementAddressCall__Outputs {
  _call: SetImplementAddressCall;

  constructor(call: SetImplementAddressCall) {
    this._call = call;
  }
}

export class SetInterestRateCall extends ethereum.Call {
  get inputs(): SetInterestRateCall__Inputs {
    return new SetInterestRateCall__Inputs(this);
  }

  get outputs(): SetInterestRateCall__Outputs {
    return new SetInterestRateCall__Outputs(this);
  }
}

export class SetInterestRateCall__Inputs {
  _call: SetInterestRateCall;

  constructor(call: SetInterestRateCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetInterestRateCall__Outputs {
  _call: SetInterestRateCall;

  constructor(call: SetInterestRateCall) {
    this._call = call;
  }
}

export class SetLeverageFeeCall extends ethereum.Call {
  get inputs(): SetLeverageFeeCall__Inputs {
    return new SetLeverageFeeCall__Inputs(this);
  }

  get outputs(): SetLeverageFeeCall__Outputs {
    return new SetLeverageFeeCall__Outputs(this);
  }
}

export class SetLeverageFeeCall__Inputs {
  _call: SetLeverageFeeCall;

  constructor(call: SetLeverageFeeCall) {
    this._call = call;
  }

  get _buyFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _sellFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _rebalanceFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetLeverageFeeCall__Outputs {
  _call: SetLeverageFeeCall;

  constructor(call: SetLeverageFeeCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetOracleAddressCall extends ethereum.Call {
  get inputs(): SetOracleAddressCall__Inputs {
    return new SetOracleAddressCall__Inputs(this);
  }

  get outputs(): SetOracleAddressCall__Outputs {
    return new SetOracleAddressCall__Outputs(this);
  }
}

export class SetOracleAddressCall__Inputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }

  get _phxOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleAddressCall__Outputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }
}

export class SetPHXVestingPoolCall extends ethereum.Call {
  get inputs(): SetPHXVestingPoolCall__Inputs {
    return new SetPHXVestingPoolCall__Inputs(this);
  }

  get outputs(): SetPHXVestingPoolCall__Outputs {
    return new SetPHXVestingPoolCall__Outputs(this);
  }
}

export class SetPHXVestingPoolCall__Inputs {
  _call: SetPHXVestingPoolCall;

  constructor(call: SetPHXVestingPoolCall) {
    this._call = call;
  }

  get _PHXVestingPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPHXVestingPoolCall__Outputs {
  _call: SetPHXVestingPoolCall;

  constructor(call: SetPHXVestingPoolCall) {
    this._call = call;
  }
}

export class SetPPTTimeLimitCall extends ethereum.Call {
  get inputs(): SetPPTTimeLimitCall__Inputs {
    return new SetPPTTimeLimitCall__Inputs(this);
  }

  get outputs(): SetPPTTimeLimitCall__Outputs {
    return new SetPPTTimeLimitCall__Outputs(this);
  }
}

export class SetPPTTimeLimitCall__Inputs {
  _call: SetPPTTimeLimitCall;

  constructor(call: SetPPTTimeLimitCall) {
    this._call = call;
  }

  get _PPTTimeLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPPTTimeLimitCall__Outputs {
  _call: SetPPTTimeLimitCall;

  constructor(call: SetPPTTimeLimitCall) {
    this._call = call;
  }
}

export class SetRebalanceIntervalCall extends ethereum.Call {
  get inputs(): SetRebalanceIntervalCall__Inputs {
    return new SetRebalanceIntervalCall__Inputs(this);
  }

  get outputs(): SetRebalanceIntervalCall__Outputs {
    return new SetRebalanceIntervalCall__Outputs(this);
  }
}

export class SetRebalanceIntervalCall__Inputs {
  _call: SetRebalanceIntervalCall;

  constructor(call: SetRebalanceIntervalCall) {
    this._call = call;
  }

  get interval(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRebalanceIntervalCall__Outputs {
  _call: SetRebalanceIntervalCall;

  constructor(call: SetRebalanceIntervalCall) {
    this._call = call;
  }
}

export class SetRebaseTimeLimitCall extends ethereum.Call {
  get inputs(): SetRebaseTimeLimitCall__Inputs {
    return new SetRebaseTimeLimitCall__Inputs(this);
  }

  get outputs(): SetRebaseTimeLimitCall__Outputs {
    return new SetRebaseTimeLimitCall__Outputs(this);
  }
}

export class SetRebaseTimeLimitCall__Inputs {
  _call: SetRebaseTimeLimitCall;

  constructor(call: SetRebaseTimeLimitCall) {
    this._call = call;
  }

  get _rebaseTimeLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRebaseTimeLimitCall__Outputs {
  _call: SetRebaseTimeLimitCall;

  constructor(call: SetRebaseTimeLimitCall) {
    this._call = call;
  }
}

export class SetSwapLibAddressCall extends ethereum.Call {
  get inputs(): SetSwapLibAddressCall__Inputs {
    return new SetSwapLibAddressCall__Inputs(this);
  }

  get outputs(): SetSwapLibAddressCall__Outputs {
    return new SetSwapLibAddressCall__Outputs(this);
  }
}

export class SetSwapLibAddressCall__Inputs {
  _call: SetSwapLibAddressCall;

  constructor(call: SetSwapLibAddressCall) {
    this._call = call;
  }

  get _swapLib(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSwapLibAddressCall__Outputs {
  _call: SetSwapLibAddressCall;

  constructor(call: SetSwapLibAddressCall) {
    this._call = call;
  }
}

export class SetSwapRouterAddressCall extends ethereum.Call {
  get inputs(): SetSwapRouterAddressCall__Inputs {
    return new SetSwapRouterAddressCall__Inputs(this);
  }

  get outputs(): SetSwapRouterAddressCall__Outputs {
    return new SetSwapRouterAddressCall__Outputs(this);
  }
}

export class SetSwapRouterAddressCall__Inputs {
  _call: SetSwapRouterAddressCall;

  constructor(call: SetSwapRouterAddressCall) {
    this._call = call;
  }

  get _swapRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSwapRouterAddressCall__Outputs {
  _call: SetSwapRouterAddressCall;

  constructor(call: SetSwapRouterAddressCall) {
    this._call = call;
  }
}

export class TransferOriginCall extends ethereum.Call {
  get inputs(): TransferOriginCall__Inputs {
    return new TransferOriginCall__Inputs(this);
  }

  get outputs(): TransferOriginCall__Outputs {
    return new TransferOriginCall__Outputs(this);
  }
}

export class TransferOriginCall__Inputs {
  _call: TransferOriginCall;

  constructor(call: TransferOriginCall) {
    this._call = call;
  }

  get _newOrigin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOriginCall__Outputs {
  _call: TransferOriginCall;

  constructor(call: TransferOriginCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateCall extends ethereum.Call {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class UpgradePhxProxyCall extends ethereum.Call {
  get inputs(): UpgradePhxProxyCall__Inputs {
    return new UpgradePhxProxyCall__Inputs(this);
  }

  get outputs(): UpgradePhxProxyCall__Outputs {
    return new UpgradePhxProxyCall__Outputs(this);
  }
}

export class UpgradePhxProxyCall__Inputs {
  _call: UpgradePhxProxyCall;

  constructor(call: UpgradePhxProxyCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get implementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpgradePhxProxyCall__Outputs {
  _call: UpgradePhxProxyCall;

  constructor(call: UpgradePhxProxyCall) {
    this._call = call;
  }
}
