// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BurnOption extends ethereum.Event {
  get params(): BurnOption__Params {
    return new BurnOption__Params(this);
  }
}

export class BurnOption__Params {
  _event: BurnOption;

  constructor(event: BurnOption) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get optionID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CreateOption extends ethereum.Event {
  get params(): CreateOption__Params {
    return new CreateOption__Params(this);
  }
}

export class CreateOption__Params {
  _event: CreateOption;

  constructor(event: CreateOption) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get optionID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get optType(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get underlying(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get strikePrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class DebugEvent extends ethereum.Event {
  get params(): DebugEvent__Params {
    return new DebugEvent__Params(this);
  }
}

export class DebugEvent__Params {
  _event: DebugEvent;

  constructor(event: DebugEvent) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OptionPool__calRangeSharedPaymentResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: BigInt;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionPool__calculatePhaseOccupiedCollateralResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class OptionPool__getAllTotalOccupiedCollateralResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class OptionPool__getBurnedFullPayResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class OptionPool__getInputAmountRangeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class OptionPool__getNetWrothCalInfoResult {
  value0: BigInt;
  value1: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigIntArray(this.value1));
    return map;
  }
}

export class OptionPool__getOccupiedCalInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    return map;
  }
}

export class OptionPool__getOptionCalRangeAllResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Array<BigInt>;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Array<BigInt>,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigIntArray(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class OptionPool__getOptionInfoListResult {
  value0: Array<Address>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;
  value4: Array<BigInt>;

  constructor(
    value0: Array<Address>,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<BigInt>,
    value4: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    return map;
  }
}

export class OptionPool__getOptionInfoListFromIDResult {
  value0: Array<Address>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;
  value4: Array<BigInt>;

  constructor(
    value0: Array<Address>,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<BigInt>,
    value4: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    return map;
  }
}

export class OptionPool__getOptionsByIdResult {
  value0: BigInt;
  value1: Address;
  value2: i32;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: i32,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class OptionPool__getOptionsExtraByIdResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class OptionPool__getUserAllOptionInfoResult {
  value0: Array<Address>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;
  value4: Array<BigInt>;

  constructor(
    value0: Array<Address>,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<BigInt>,
    value4: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    return map;
  }
}

export class OptionPool extends ethereum.SmartContract {
  static bind(address: Address): OptionPool {
    return new OptionPool("OptionPool", address);
  }

  calRangeSharedPayment(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt,
    param3: Array<Address>
  ): OptionPool__calRangeSharedPaymentResult {
    let result = super.call(
      "calRangeSharedPayment",
      "calRangeSharedPayment(uint256,uint256,uint256,address[]):(int256[],uint256[],uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromAddressArray(param3)
      ]
    );

    return new OptionPool__calRangeSharedPaymentResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBigInt()
    );
  }

  try_calRangeSharedPayment(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt,
    param3: Array<Address>
  ): ethereum.CallResult<OptionPool__calRangeSharedPaymentResult> {
    let result = super.tryCall(
      "calRangeSharedPayment",
      "calRangeSharedPayment(uint256,uint256,uint256,address[]):(int256[],uint256[],uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromAddressArray(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__calRangeSharedPaymentResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBigInt()
      )
    );
  }

  calculatePhaseOccupiedCollateral(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt
  ): OptionPool__calculatePhaseOccupiedCollateralResult {
    let result = super.call(
      "calculatePhaseOccupiedCollateral",
      "calculatePhaseOccupiedCollateral(uint256,uint256,uint256):(uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return new OptionPool__calculatePhaseOccupiedCollateralResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_calculatePhaseOccupiedCollateral(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<OptionPool__calculatePhaseOccupiedCollateralResult> {
    let result = super.tryCall(
      "calculatePhaseOccupiedCollateral",
      "calculatePhaseOccupiedCollateral(uint256,uint256,uint256):(uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__calculatePhaseOccupiedCollateralResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  calculatePhaseOptionsFall(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt,
    param3: Array<Address>
  ): Array<BigInt> {
    let result = super.call(
      "calculatePhaseOptionsFall",
      "calculatePhaseOptionsFall(uint256,uint256,uint256,address[]):(int256[])",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromAddressArray(param3)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_calculatePhaseOptionsFall(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt,
    param3: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "calculatePhaseOptionsFall",
      "calculatePhaseOptionsFall(uint256,uint256,uint256,address[]):(int256[])",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromAddressArray(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  createOptions(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: BigInt,
    param5: BigInt,
    param6: BigInt
  ): BigInt {
    let result = super.call(
      "createOptions",
      "createOptions(address,address,uint256,uint128,uint128,uint128,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(param5),
        ethereum.Value.fromUnsignedBigInt(param6)
      ]
    );

    return result[0].toBigInt();
  }

  try_createOptions(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: BigInt,
    param5: BigInt,
    param6: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createOptions",
      "createOptions(address,address,uint256,uint128,uint128,uint128,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(param5),
        ethereum.Value.fromUnsignedBigInt(param6)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegateToImplementation(data: Bytes): Bytes {
    let result = super.call(
      "delegateToImplementation",
      "delegateToImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );

    return result[0].toBytes();
  }

  try_delegateToImplementation(data: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "delegateToImplementation",
      "delegateToImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  delegateToViewImplementation(data: Bytes): Bytes {
    let result = super.call(
      "delegateToViewImplementation",
      "delegateToViewImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );

    return result[0].toBytes();
  }

  try_delegateToViewImplementation(data: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "delegateToViewImplementation",
      "delegateToViewImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAllTotalOccupiedCollateral(): OptionPool__getAllTotalOccupiedCollateralResult {
    let result = super.call(
      "getAllTotalOccupiedCollateral",
      "getAllTotalOccupiedCollateral():(uint256,uint256)",
      []
    );

    return new OptionPool__getAllTotalOccupiedCollateralResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getAllTotalOccupiedCollateral(): ethereum.CallResult<
    OptionPool__getAllTotalOccupiedCollateralResult
  > {
    let result = super.tryCall(
      "getAllTotalOccupiedCollateral",
      "getAllTotalOccupiedCollateral():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getAllTotalOccupiedCollateralResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getBurnedFullPay(
    param0: BigInt,
    param1: BigInt
  ): OptionPool__getBurnedFullPayResult {
    let result = super.call(
      "getBurnedFullPay",
      "getBurnedFullPay(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new OptionPool__getBurnedFullPayResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_getBurnedFullPay(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<OptionPool__getBurnedFullPayResult> {
    let result = super.tryCall(
      "getBurnedFullPay",
      "getBurnedFullPay(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getBurnedFullPayResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  getCallTotalOccupiedCollateral(): BigInt {
    let result = super.call(
      "getCallTotalOccupiedCollateral",
      "getCallTotalOccupiedCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCallTotalOccupiedCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCallTotalOccupiedCollateral",
      "getCallTotalOccupiedCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExerciseWorth(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "getExerciseWorth",
      "getExerciseWorth(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_getExerciseWorth(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExerciseWorth",
      "getExerciseWorth(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExpirationList(): Array<BigInt> {
    let result = super.call(
      "getExpirationList",
      "getExpirationList():(uint32[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getExpirationList(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getExpirationList",
      "getExpirationList():(uint32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getImplementation(): Address {
    let result = super.call(
      "getImplementation",
      "getImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getImplementation",
      "getImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getInputAmountRange(): OptionPool__getInputAmountRangeResult {
    let result = super.call(
      "getInputAmountRange",
      "getInputAmountRange():(uint256,uint256)",
      []
    );

    return new OptionPool__getInputAmountRangeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getInputAmountRange(): ethereum.CallResult<
    OptionPool__getInputAmountRangeResult
  > {
    let result = super.tryCall(
      "getInputAmountRange",
      "getInputAmountRange():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getInputAmountRangeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getManager(): Address {
    let result = super.call("getManager", "getManager():(address)", []);

    return result[0].toAddress();
  }

  try_getManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("getManager", "getManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNetWrothCalInfo(
    param0: Array<Address>
  ): OptionPool__getNetWrothCalInfoResult {
    let result = super.call(
      "getNetWrothCalInfo",
      "getNetWrothCalInfo(address[]):(uint256,int256[])",
      [ethereum.Value.fromAddressArray(param0)]
    );

    return new OptionPool__getNetWrothCalInfoResult(
      result[0].toBigInt(),
      result[1].toBigIntArray()
    );
  }

  try_getNetWrothCalInfo(
    param0: Array<Address>
  ): ethereum.CallResult<OptionPool__getNetWrothCalInfoResult> {
    let result = super.tryCall(
      "getNetWrothCalInfo",
      "getNetWrothCalInfo(address[]):(uint256,int256[])",
      [ethereum.Value.fromAddressArray(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getNetWrothCalInfoResult(
        value[0].toBigInt(),
        value[1].toBigIntArray()
      )
    );
  }

  getNetWrothLatestWorth(param0: Address): BigInt {
    let result = super.call(
      "getNetWrothLatestWorth",
      "getNetWrothLatestWorth(address):(int256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_getNetWrothLatestWorth(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNetWrothLatestWorth",
      "getNetWrothLatestWorth(address):(int256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOccupiedCalInfo(): OptionPool__getOccupiedCalInfoResult {
    let result = super.call(
      "getOccupiedCalInfo",
      "getOccupiedCalInfo():(uint256,int256,int256)",
      []
    );

    return new OptionPool__getOccupiedCalInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getOccupiedCalInfo(): ethereum.CallResult<
    OptionPool__getOccupiedCalInfoResult
  > {
    let result = super.tryCall(
      "getOccupiedCalInfo",
      "getOccupiedCalInfo():(uint256,int256,int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getOccupiedCalInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getOperator(): Array<Address> {
    let result = super.call("getOperator", "getOperator():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getOperator(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getOperator", "getOperator():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getOptionCalRangeAll(
    param0: Array<Address>
  ): OptionPool__getOptionCalRangeAllResult {
    let result = super.call(
      "getOptionCalRangeAll",
      "getOptionCalRangeAll(address[]):(uint256,int256,int256,uint256,int256[],uint256,uint256)",
      [ethereum.Value.fromAddressArray(param0)]
    );

    return new OptionPool__getOptionCalRangeAllResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigIntArray(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_getOptionCalRangeAll(
    param0: Array<Address>
  ): ethereum.CallResult<OptionPool__getOptionCalRangeAllResult> {
    let result = super.tryCall(
      "getOptionCalRangeAll",
      "getOptionCalRangeAll(address[]):(uint256,int256,int256,uint256,int256[],uint256,uint256)",
      [ethereum.Value.fromAddressArray(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getOptionCalRangeAllResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigIntArray(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  getOptionInfoLength(): BigInt {
    let result = super.call(
      "getOptionInfoLength",
      "getOptionInfoLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getOptionInfoLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOptionInfoLength",
      "getOptionInfoLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOptionInfoList(
    param0: BigInt,
    param1: BigInt
  ): OptionPool__getOptionInfoListResult {
    let result = super.call(
      "getOptionInfoList",
      "getOptionInfoList(uint256,uint256):(address[],uint256[],uint256[],uint256[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new OptionPool__getOptionInfoListResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray(),
      result[4].toBigIntArray()
    );
  }

  try_getOptionInfoList(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<OptionPool__getOptionInfoListResult> {
    let result = super.tryCall(
      "getOptionInfoList",
      "getOptionInfoList(uint256,uint256):(address[],uint256[],uint256[],uint256[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getOptionInfoListResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray(),
        value[4].toBigIntArray()
      )
    );
  }

  getOptionInfoListFromID(
    param0: Array<BigInt>
  ): OptionPool__getOptionInfoListFromIDResult {
    let result = super.call(
      "getOptionInfoListFromID",
      "getOptionInfoListFromID(uint256[]):(address[],uint256[],uint256[],uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(param0)]
    );

    return new OptionPool__getOptionInfoListFromIDResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray(),
      result[4].toBigIntArray()
    );
  }

  try_getOptionInfoListFromID(
    param0: Array<BigInt>
  ): ethereum.CallResult<OptionPool__getOptionInfoListFromIDResult> {
    let result = super.tryCall(
      "getOptionInfoListFromID",
      "getOptionInfoListFromID(uint256[]):(address[],uint256[],uint256[],uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getOptionInfoListFromIDResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray(),
        value[4].toBigIntArray()
      )
    );
  }

  getOptionsById(param0: BigInt): OptionPool__getOptionsByIdResult {
    let result = super.call(
      "getOptionsById",
      "getOptionsById(uint256):(uint256,address,uint8,uint32,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new OptionPool__getOptionsByIdResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_getOptionsById(
    param0: BigInt
  ): ethereum.CallResult<OptionPool__getOptionsByIdResult> {
    let result = super.tryCall(
      "getOptionsById",
      "getOptionsById(uint256):(uint256,address,uint8,uint32,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getOptionsByIdResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  getOptionsExtraById(param0: BigInt): OptionPool__getOptionsExtraByIdResult {
    let result = super.call(
      "getOptionsExtraById",
      "getOptionsExtraById(uint256):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new OptionPool__getOptionsExtraByIdResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getOptionsExtraById(
    param0: BigInt
  ): ethereum.CallResult<OptionPool__getOptionsExtraByIdResult> {
    let result = super.tryCall(
      "getOptionsExtraById",
      "getOptionsExtraById(uint256):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getOptionsExtraByIdResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getOptionsLimitTimeById(param0: BigInt): BigInt {
    let result = super.call(
      "getOptionsLimitTimeById",
      "getOptionsLimitTimeById(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_getOptionsLimitTimeById(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOptionsLimitTimeById",
      "getOptionsLimitTimeById(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOptionsPriceAddress(): Address {
    let result = super.call(
      "getOptionsPriceAddress",
      "getOptionsPriceAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getOptionsPriceAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOptionsPriceAddress",
      "getOptionsPriceAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOracleAddress(): Address {
    let result = super.call(
      "getOracleAddress",
      "getOracleAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getOracleAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOracleAddress",
      "getOracleAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPutTotalOccupiedCollateral(): BigInt {
    let result = super.call(
      "getPutTotalOccupiedCollateral",
      "getPutTotalOccupiedCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPutTotalOccupiedCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPutTotalOccupiedCollateral",
      "getPutTotalOccupiedCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTimeLimitation(): BigInt {
    let result = super.call(
      "getTimeLimitation",
      "getTimeLimitation():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTimeLimitation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimeLimitation",
      "getTimeLimitation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalOccupiedCollateral(): BigInt {
    let result = super.call(
      "getTotalOccupiedCollateral",
      "getTotalOccupiedCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalOccupiedCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalOccupiedCollateral",
      "getTotalOccupiedCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnderlyingAssets(): Array<BigInt> {
    let result = super.call(
      "getUnderlyingAssets",
      "getUnderlyingAssets():(uint32[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getUnderlyingAssets(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUnderlyingAssets",
      "getUnderlyingAssets():(uint32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getUserAllOptionInfo(
    param0: Address
  ): OptionPool__getUserAllOptionInfoResult {
    let result = super.call(
      "getUserAllOptionInfo",
      "getUserAllOptionInfo(address):(address[],uint256[],uint256[],uint256[],uint256[])",
      [ethereum.Value.fromAddress(param0)]
    );

    return new OptionPool__getUserAllOptionInfoResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray(),
      result[4].toBigIntArray()
    );
  }

  try_getUserAllOptionInfo(
    param0: Address
  ): ethereum.CallResult<OptionPool__getUserAllOptionInfoResult> {
    let result = super.tryCall(
      "getUserAllOptionInfo",
      "getUserAllOptionInfo(address):(address[],uint256[],uint256[],uint256[],uint256[])",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getUserAllOptionInfoResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray(),
        value[4].toBigIntArray()
      )
    );
  }

  getUserOptionsID(param0: Address): Array<BigInt> {
    let result = super.call(
      "getUserOptionsID",
      "getUserOptionsID(address):(uint64[])",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigIntArray();
  }

  try_getUserOptionsID(param0: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserOptionsID",
      "getUserOptionsID(address):(uint64[])",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getUserOptionsID1(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "getUserOptionsID",
      "getUserOptionsID(address,uint256,uint256):(uint64[])",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getUserOptionsID1(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserOptionsID",
      "getUserOptionsID(address,uint256,uint256):(uint64[])",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getVolatilityAddress(): Address {
    let result = super.call(
      "getVolatilityAddress",
      "getVolatilityAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getVolatilityAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getVolatilityAddress",
      "getVolatilityAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isEligibleExpiration(param0: BigInt): boolean {
    let result = super.call(
      "isEligibleExpiration",
      "isEligibleExpiration(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_isEligibleExpiration(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEligibleExpiration",
      "isEligibleExpiration(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isEligibleUnderlyingAsset(underlying: BigInt): boolean {
    let result = super.call(
      "isEligibleUnderlyingAsset",
      "isEligibleUnderlyingAsset(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(underlying)]
    );

    return result[0].toBoolean();
  }

  try_isEligibleUnderlyingAsset(
    underlying: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEligibleUnderlyingAsset",
      "isEligibleUnderlyingAsset(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(underlying)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isInputAmountInRange(Amount: BigInt): boolean {
    let result = super.call(
      "isInputAmountInRange",
      "isInputAmountInRange(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(Amount)]
    );

    return result[0].toBoolean();
  }

  try_isInputAmountInRange(Amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInputAmountInRange",
      "isInputAmountInRange(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(Amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  removeExpirationList(param0: BigInt): boolean {
    let result = super.call(
      "removeExpirationList",
      "removeExpirationList(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_removeExpirationList(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removeExpirationList",
      "removeExpirationList(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  removeOperator(removeAddress: Address): boolean {
    let result = super.call(
      "removeOperator",
      "removeOperator(address):(bool)",
      [ethereum.Value.fromAddress(removeAddress)]
    );

    return result[0].toBoolean();
  }

  try_removeOperator(removeAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removeOperator",
      "removeOperator(address):(bool)",
      [ethereum.Value.fromAddress(removeAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  removeUnderlyingAssets(removeUnderlying: BigInt): boolean {
    let result = super.call(
      "removeUnderlyingAssets",
      "removeUnderlyingAssets(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(removeUnderlying)]
    );

    return result[0].toBoolean();
  }

  try_removeUnderlyingAssets(
    removeUnderlying: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removeUnderlyingAssets",
      "removeUnderlyingAssets(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(removeUnderlying)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get implementation_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oracleAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get optionsPriceAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get ivAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddExpirationCall extends ethereum.Call {
  get inputs(): AddExpirationCall__Inputs {
    return new AddExpirationCall__Inputs(this);
  }

  get outputs(): AddExpirationCall__Outputs {
    return new AddExpirationCall__Outputs(this);
  }
}

export class AddExpirationCall__Inputs {
  _call: AddExpirationCall;

  constructor(call: AddExpirationCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddExpirationCall__Outputs {
  _call: AddExpirationCall;

  constructor(call: AddExpirationCall) {
    this._call = call;
  }
}

export class AddOperatorCall extends ethereum.Call {
  get inputs(): AddOperatorCall__Inputs {
    return new AddOperatorCall__Inputs(this);
  }

  get outputs(): AddOperatorCall__Outputs {
    return new AddOperatorCall__Outputs(this);
  }
}

export class AddOperatorCall__Inputs {
  _call: AddOperatorCall;

  constructor(call: AddOperatorCall) {
    this._call = call;
  }

  get addAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddOperatorCall__Outputs {
  _call: AddOperatorCall;

  constructor(call: AddOperatorCall) {
    this._call = call;
  }
}

export class AddUnderlyingAssetCall extends ethereum.Call {
  get inputs(): AddUnderlyingAssetCall__Inputs {
    return new AddUnderlyingAssetCall__Inputs(this);
  }

  get outputs(): AddUnderlyingAssetCall__Outputs {
    return new AddUnderlyingAssetCall__Outputs(this);
  }
}

export class AddUnderlyingAssetCall__Inputs {
  _call: AddUnderlyingAssetCall;

  constructor(call: AddUnderlyingAssetCall) {
    this._call = call;
  }

  get underlying(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddUnderlyingAssetCall__Outputs {
  _call: AddUnderlyingAssetCall;

  constructor(call: AddUnderlyingAssetCall) {
    this._call = call;
  }
}

export class BurnOptionsCall extends ethereum.Call {
  get inputs(): BurnOptionsCall__Inputs {
    return new BurnOptionsCall__Inputs(this);
  }

  get outputs(): BurnOptionsCall__Outputs {
    return new BurnOptionsCall__Outputs(this);
  }
}

export class BurnOptionsCall__Inputs {
  _call: BurnOptionsCall;

  constructor(call: BurnOptionsCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BurnOptionsCall__Outputs {
  _call: BurnOptionsCall;

  constructor(call: BurnOptionsCall) {
    this._call = call;
  }
}

export class CreateOptionsCall extends ethereum.Call {
  get inputs(): CreateOptionsCall__Inputs {
    return new CreateOptionsCall__Inputs(this);
  }

  get outputs(): CreateOptionsCall__Outputs {
    return new CreateOptionsCall__Outputs(this);
  }
}

export class CreateOptionsCall__Inputs {
  _call: CreateOptionsCall;

  constructor(call: CreateOptionsCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get value5(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get value6(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CreateOptionsCall__Outputs {
  _call: CreateOptionsCall;

  constructor(call: CreateOptionsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DelegateToImplementationCall extends ethereum.Call {
  get inputs(): DelegateToImplementationCall__Inputs {
    return new DelegateToImplementationCall__Inputs(this);
  }

  get outputs(): DelegateToImplementationCall__Outputs {
    return new DelegateToImplementationCall__Outputs(this);
  }
}

export class DelegateToImplementationCall__Inputs {
  _call: DelegateToImplementationCall;

  constructor(call: DelegateToImplementationCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class DelegateToImplementationCall__Outputs {
  _call: DelegateToImplementationCall;

  constructor(call: DelegateToImplementationCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RemoveExpirationListCall extends ethereum.Call {
  get inputs(): RemoveExpirationListCall__Inputs {
    return new RemoveExpirationListCall__Inputs(this);
  }

  get outputs(): RemoveExpirationListCall__Outputs {
    return new RemoveExpirationListCall__Outputs(this);
  }
}

export class RemoveExpirationListCall__Inputs {
  _call: RemoveExpirationListCall;

  constructor(call: RemoveExpirationListCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveExpirationListCall__Outputs {
  _call: RemoveExpirationListCall;

  constructor(call: RemoveExpirationListCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveOperatorCall extends ethereum.Call {
  get inputs(): RemoveOperatorCall__Inputs {
    return new RemoveOperatorCall__Inputs(this);
  }

  get outputs(): RemoveOperatorCall__Outputs {
    return new RemoveOperatorCall__Outputs(this);
  }
}

export class RemoveOperatorCall__Inputs {
  _call: RemoveOperatorCall;

  constructor(call: RemoveOperatorCall) {
    this._call = call;
  }

  get removeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveOperatorCall__Outputs {
  _call: RemoveOperatorCall;

  constructor(call: RemoveOperatorCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveUnderlyingAssetsCall extends ethereum.Call {
  get inputs(): RemoveUnderlyingAssetsCall__Inputs {
    return new RemoveUnderlyingAssetsCall__Inputs(this);
  }

  get outputs(): RemoveUnderlyingAssetsCall__Outputs {
    return new RemoveUnderlyingAssetsCall__Outputs(this);
  }
}

export class RemoveUnderlyingAssetsCall__Inputs {
  _call: RemoveUnderlyingAssetsCall;

  constructor(call: RemoveUnderlyingAssetsCall) {
    this._call = call;
  }

  get removeUnderlying(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveUnderlyingAssetsCall__Outputs {
  _call: RemoveUnderlyingAssetsCall;

  constructor(call: RemoveUnderlyingAssetsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCollateralPhaseCall extends ethereum.Call {
  get inputs(): SetCollateralPhaseCall__Inputs {
    return new SetCollateralPhaseCall__Inputs(this);
  }

  get outputs(): SetCollateralPhaseCall__Outputs {
    return new SetCollateralPhaseCall__Outputs(this);
  }
}

export class SetCollateralPhaseCall__Inputs {
  _call: SetCollateralPhaseCall;

  constructor(call: SetCollateralPhaseCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SetCollateralPhaseCall__Outputs {
  _call: SetCollateralPhaseCall;

  constructor(call: SetCollateralPhaseCall) {
    this._call = call;
  }
}

export class SetImplementationCall extends ethereum.Call {
  get inputs(): SetImplementationCall__Inputs {
    return new SetImplementationCall__Inputs(this);
  }

  get outputs(): SetImplementationCall__Outputs {
    return new SetImplementationCall__Outputs(this);
  }
}

export class SetImplementationCall__Inputs {
  _call: SetImplementationCall;

  constructor(call: SetImplementationCall) {
    this._call = call;
  }

  get implementation_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetImplementationCall__Outputs {
  _call: SetImplementationCall;

  constructor(call: SetImplementationCall) {
    this._call = call;
  }
}

export class SetInputAmountRangeCall extends ethereum.Call {
  get inputs(): SetInputAmountRangeCall__Inputs {
    return new SetInputAmountRangeCall__Inputs(this);
  }

  get outputs(): SetInputAmountRangeCall__Outputs {
    return new SetInputAmountRangeCall__Outputs(this);
  }
}

export class SetInputAmountRangeCall__Inputs {
  _call: SetInputAmountRangeCall;

  constructor(call: SetInputAmountRangeCall) {
    this._call = call;
  }

  get _minAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetInputAmountRangeCall__Outputs {
  _call: SetInputAmountRangeCall;

  constructor(call: SetInputAmountRangeCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get managerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}

export class SetOccupiedCollateralCall extends ethereum.Call {
  get inputs(): SetOccupiedCollateralCall__Inputs {
    return new SetOccupiedCollateralCall__Inputs(this);
  }

  get outputs(): SetOccupiedCollateralCall__Outputs {
    return new SetOccupiedCollateralCall__Outputs(this);
  }
}

export class SetOccupiedCollateralCall__Inputs {
  _call: SetOccupiedCollateralCall;

  constructor(call: SetOccupiedCollateralCall) {
    this._call = call;
  }
}

export class SetOccupiedCollateralCall__Outputs {
  _call: SetOccupiedCollateralCall;

  constructor(call: SetOccupiedCollateralCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get addAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetOperatorsCall extends ethereum.Call {
  get inputs(): SetOperatorsCall__Inputs {
    return new SetOperatorsCall__Inputs(this);
  }

  get outputs(): SetOperatorsCall__Outputs {
    return new SetOperatorsCall__Outputs(this);
  }
}

export class SetOperatorsCall__Inputs {
  _call: SetOperatorsCall;

  constructor(call: SetOperatorsCall) {
    this._call = call;
  }

  get operators(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetOperatorsCall__Outputs {
  _call: SetOperatorsCall;

  constructor(call: SetOperatorsCall) {
    this._call = call;
  }
}

export class SetOptionsPriceAddressCall extends ethereum.Call {
  get inputs(): SetOptionsPriceAddressCall__Inputs {
    return new SetOptionsPriceAddressCall__Inputs(this);
  }

  get outputs(): SetOptionsPriceAddressCall__Outputs {
    return new SetOptionsPriceAddressCall__Outputs(this);
  }
}

export class SetOptionsPriceAddressCall__Inputs {
  _call: SetOptionsPriceAddressCall;

  constructor(call: SetOptionsPriceAddressCall) {
    this._call = call;
  }

  get optionsPrice(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOptionsPriceAddressCall__Outputs {
  _call: SetOptionsPriceAddressCall;

  constructor(call: SetOptionsPriceAddressCall) {
    this._call = call;
  }
}

export class SetOracleAddressCall extends ethereum.Call {
  get inputs(): SetOracleAddressCall__Inputs {
    return new SetOracleAddressCall__Inputs(this);
  }

  get outputs(): SetOracleAddressCall__Outputs {
    return new SetOracleAddressCall__Outputs(this);
  }
}

export class SetOracleAddressCall__Inputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }

  get oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleAddressCall__Outputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }
}

export class SetSharedStateCall extends ethereum.Call {
  get inputs(): SetSharedStateCall__Inputs {
    return new SetSharedStateCall__Inputs(this);
  }

  get outputs(): SetSharedStateCall__Outputs {
    return new SetSharedStateCall__Outputs(this);
  }
}

export class SetSharedStateCall__Inputs {
  _call: SetSharedStateCall;

  constructor(call: SetSharedStateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value1(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get value2(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class SetSharedStateCall__Outputs {
  _call: SetSharedStateCall;

  constructor(call: SetSharedStateCall) {
    this._call = call;
  }
}

export class SetTimeLimitationCall extends ethereum.Call {
  get inputs(): SetTimeLimitationCall__Inputs {
    return new SetTimeLimitationCall__Inputs(this);
  }

  get outputs(): SetTimeLimitationCall__Outputs {
    return new SetTimeLimitationCall__Outputs(this);
  }
}

export class SetTimeLimitationCall__Inputs {
  _call: SetTimeLimitationCall;

  constructor(call: SetTimeLimitationCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTimeLimitationCall__Outputs {
  _call: SetTimeLimitationCall;

  constructor(call: SetTimeLimitationCall) {
    this._call = call;
  }
}

export class SetUnderlyingAssetCall extends ethereum.Call {
  get inputs(): SetUnderlyingAssetCall__Inputs {
    return new SetUnderlyingAssetCall__Inputs(this);
  }

  get outputs(): SetUnderlyingAssetCall__Outputs {
    return new SetUnderlyingAssetCall__Outputs(this);
  }
}

export class SetUnderlyingAssetCall__Inputs {
  _call: SetUnderlyingAssetCall;

  constructor(call: SetUnderlyingAssetCall) {
    this._call = call;
  }

  get underlyings(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetUnderlyingAssetCall__Outputs {
  _call: SetUnderlyingAssetCall;

  constructor(call: SetUnderlyingAssetCall) {
    this._call = call;
  }
}

export class SetVolatilityAddressCall extends ethereum.Call {
  get inputs(): SetVolatilityAddressCall__Inputs {
    return new SetVolatilityAddressCall__Inputs(this);
  }

  get outputs(): SetVolatilityAddressCall__Outputs {
    return new SetVolatilityAddressCall__Outputs(this);
  }
}

export class SetVolatilityAddressCall__Inputs {
  _call: SetVolatilityAddressCall;

  constructor(call: SetVolatilityAddressCall) {
    this._call = call;
  }

  get volatility(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVolatilityAddressCall__Outputs {
  _call: SetVolatilityAddressCall;

  constructor(call: SetVolatilityAddressCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
