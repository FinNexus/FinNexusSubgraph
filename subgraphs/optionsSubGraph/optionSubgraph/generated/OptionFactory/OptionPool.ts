// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BurnOption extends ethereum.Event {
  get params(): BurnOption__Params {
    return new BurnOption__Params(this);
  }
}

export class BurnOption__Params {
  _event: BurnOption;

  constructor(event: BurnOption) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get optionID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CreateOption extends ethereum.Event {
  get params(): CreateOption__Params {
    return new CreateOption__Params(this);
  }
}

export class CreateOption__Params {
  _event: CreateOption;

  constructor(event: CreateOption) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get optionID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get optType(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get underlying(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get strikePrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class DebugEvent extends ethereum.Event {
  get params(): DebugEvent__Params {
    return new DebugEvent__Params(this);
  }
}

export class DebugEvent__Params {
  _event: DebugEvent;

  constructor(event: DebugEvent) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get msgHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get value1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OperatorTransferred extends ethereum.Event {
  get params(): OperatorTransferred__Params {
    return new OperatorTransferred__Params(this);
  }
}

export class OperatorTransferred__Params {
  _event: OperatorTransferred;

  constructor(event: OperatorTransferred) {
    this._event = event;
  }

  get previousOperator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOperator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OriginTransferred extends ethereum.Event {
  get params(): OriginTransferred__Params {
    return new OriginTransferred__Params(this);
  }
}

export class OriginTransferred__Params {
  _event: OriginTransferred;

  constructor(event: OriginTransferred) {
    this._event = event;
  }

  get previousOrigin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOrigin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OptionPool__allOptionsResult {
  value0: Address;
  value1: i32;
  value2: i32;
  value3: BigInt;
  value4: Address;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;
  value12: BigInt;

  constructor(
    value0: Address,
    value1: i32,
    value2: i32,
    value3: BigInt,
    value4: Address,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt,
    value12: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    map.set("value12", ethereum.Value.fromUnsignedBigInt(this.value12));
    return map;
  }
}

export class OptionPool__calRangeSharedPaymentResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: BigInt;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionPool__calculatePhaseOccupiedCollateralResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: BigInt;
  value3: boolean;

  constructor(
    value0: Array<BigInt>,
    value1: Array<BigInt>,
    value2: BigInt,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class OptionPool__getBurnedFullPayResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class OptionPool__getInputAmountRangeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class OptionPool__getNetWrothCalInfoResult {
  value0: BigInt;
  value1: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigIntArray(this.value1));
    return map;
  }
}

export class OptionPool__getOccupiedCalInfoResult {
  value0: BigInt;
  value1: Array<BigInt>;
  value2: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>, value2: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigIntArray(this.value2));
    return map;
  }
}

export class OptionPool__getOptionCalRangeAllResult {
  value0: BigInt;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: BigInt;
  value4: Array<BigInt>;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: BigInt,
    value4: Array<BigInt>,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigIntArray(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class OptionPool__getOptionInfoListResult {
  value0: Array<Address>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;
  value4: Array<BigInt>;

  constructor(
    value0: Array<Address>,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<BigInt>,
    value4: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    return map;
  }
}

export class OptionPool__getOptionInfoListFromIDResult {
  value0: Array<Address>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;
  value4: Array<BigInt>;

  constructor(
    value0: Array<Address>,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<BigInt>,
    value4: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    return map;
  }
}

export class OptionPool__getOptionsByIdResult {
  value0: BigInt;
  value1: Address;
  value2: i32;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: i32,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class OptionPool__getOptionsExtraByIdResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class OptionPool__getUnderlyingTotalOccupiedCollateralResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionPool__getUserAllOptionInfoResult {
  value0: Array<Address>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;
  value4: Array<BigInt>;

  constructor(
    value0: Array<Address>,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<BigInt>,
    value4: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    return map;
  }
}

export class OptionPool__underlyingOccupiedMapResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    return map;
  }
}

export class OptionPool extends ethereum.SmartContract {
  static bind(address: Address): OptionPool {
    return new OptionPool("OptionPool", address);
  }

  OptionsNetWorthCal(): Address {
    let result = super.call(
      "OptionsNetWorthCal",
      "OptionsNetWorthCal():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_OptionsNetWorthCal(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "OptionsNetWorthCal",
      "OptionsNetWorthCal():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allOptions(param0: BigInt): OptionPool__allOptionsResult {
    let result = super.call(
      "allOptions",
      "allOptions(uint256):(address,uint8,uint24,uint64,address,uint64,uint32,uint128,uint128,uint128,uint32,uint64,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new OptionPool__allOptionsResult(
      result[0].toAddress(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt(),
      result[12].toBigInt()
    );
  }

  try_allOptions(
    param0: BigInt
  ): ethereum.CallResult<OptionPool__allOptionsResult> {
    let result = super.tryCall(
      "allOptions",
      "allOptions(uint256):(address,uint8,uint24,uint64,address,uint64,uint32,uint128,uint128,uint128,uint32,uint64,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__allOptionsResult(
        value[0].toAddress(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt(),
        value[12].toBigInt()
      )
    );
  }

  calRangeSharedPayment(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt,
    param3: Array<Address>
  ): OptionPool__calRangeSharedPaymentResult {
    let result = super.call(
      "calRangeSharedPayment",
      "calRangeSharedPayment(uint256,uint256,uint256,address[]):(int256[],uint256[],uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromAddressArray(param3)
      ]
    );

    return new OptionPool__calRangeSharedPaymentResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBigInt()
    );
  }

  try_calRangeSharedPayment(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt,
    param3: Array<Address>
  ): ethereum.CallResult<OptionPool__calRangeSharedPaymentResult> {
    let result = super.tryCall(
      "calRangeSharedPayment",
      "calRangeSharedPayment(uint256,uint256,uint256,address[]):(int256[],uint256[],uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromAddressArray(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__calRangeSharedPaymentResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBigInt()
      )
    );
  }

  calculatePhaseOccupiedCollateral(
    lastOption: BigInt,
    beginOption: BigInt,
    endOption: BigInt
  ): OptionPool__calculatePhaseOccupiedCollateralResult {
    let result = super.call(
      "calculatePhaseOccupiedCollateral",
      "calculatePhaseOccupiedCollateral(uint256,uint256,uint256):(uint256[],uint256[],uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(lastOption),
        ethereum.Value.fromUnsignedBigInt(beginOption),
        ethereum.Value.fromUnsignedBigInt(endOption)
      ]
    );

    return new OptionPool__calculatePhaseOccupiedCollateralResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_calculatePhaseOccupiedCollateral(
    lastOption: BigInt,
    beginOption: BigInt,
    endOption: BigInt
  ): ethereum.CallResult<OptionPool__calculatePhaseOccupiedCollateralResult> {
    let result = super.tryCall(
      "calculatePhaseOccupiedCollateral",
      "calculatePhaseOccupiedCollateral(uint256,uint256,uint256):(uint256[],uint256[],uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(lastOption),
        ethereum.Value.fromUnsignedBigInt(beginOption),
        ethereum.Value.fromUnsignedBigInt(endOption)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__calculatePhaseOccupiedCollateralResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  calculatePhaseOptionsFall(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt,
    param3: Array<Address>
  ): Array<BigInt> {
    let result = super.call(
      "calculatePhaseOptionsFall",
      "calculatePhaseOptionsFall(uint256,uint256,uint256,address[]):(int256[])",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromAddressArray(param3)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_calculatePhaseOptionsFall(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt,
    param3: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "calculatePhaseOptionsFall",
      "calculatePhaseOptionsFall(uint256,uint256,uint256,address[]):(int256[])",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromAddressArray(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  createOptions(
    from: Address,
    settlement: Address,
    type_ly_expiration: BigInt,
    strikePrice: BigInt,
    underlyingPrice: BigInt,
    amount: BigInt,
    settlePrice: BigInt
  ): BigInt {
    let result = super.call(
      "createOptions",
      "createOptions(address,address,uint256,uint128,uint128,uint128,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(settlement),
        ethereum.Value.fromUnsignedBigInt(type_ly_expiration),
        ethereum.Value.fromUnsignedBigInt(strikePrice),
        ethereum.Value.fromUnsignedBigInt(underlyingPrice),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(settlePrice)
      ]
    );

    return result[0].toBigInt();
  }

  try_createOptions(
    from: Address,
    settlement: Address,
    type_ly_expiration: BigInt,
    strikePrice: BigInt,
    underlyingPrice: BigInt,
    amount: BigInt,
    settlePrice: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createOptions",
      "createOptions(address,address,uint256,uint128,uint128,uint128,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(settlement),
        ethereum.Value.fromUnsignedBigInt(type_ly_expiration),
        ethereum.Value.fromUnsignedBigInt(strikePrice),
        ethereum.Value.fromUnsignedBigInt(underlyingPrice),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(settlePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegateToImplementation(data: Bytes): Bytes {
    let result = super.call(
      "delegateToImplementation",
      "delegateToImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );

    return result[0].toBytes();
  }

  try_delegateToImplementation(data: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "delegateToImplementation",
      "delegateToImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  expirationList(param0: BigInt): BigInt {
    let result = super.call(
      "expirationList",
      "expirationList(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_expirationList(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "expirationList",
      "expirationList(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBurnedFullPay(
    optionID: BigInt,
    amount: BigInt
  ): OptionPool__getBurnedFullPayResult {
    let result = super.call(
      "getBurnedFullPay",
      "getBurnedFullPay(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(optionID),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new OptionPool__getBurnedFullPayResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_getBurnedFullPay(
    optionID: BigInt,
    amount: BigInt
  ): ethereum.CallResult<OptionPool__getBurnedFullPayResult> {
    let result = super.tryCall(
      "getBurnedFullPay",
      "getBurnedFullPay(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(optionID),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getBurnedFullPayResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  getExerciseWorth(optionsId: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "getExerciseWorth",
      "getExerciseWorth(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(optionsId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getExerciseWorth(
    optionsId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExerciseWorth",
      "getExerciseWorth(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(optionsId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExpirationList(): Array<BigInt> {
    let result = super.call(
      "getExpirationList",
      "getExpirationList():(uint32[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getExpirationList(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getExpirationList",
      "getExpirationList():(uint32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getInputAmountRange(): OptionPool__getInputAmountRangeResult {
    let result = super.call(
      "getInputAmountRange",
      "getInputAmountRange():(uint256,uint256)",
      []
    );

    return new OptionPool__getInputAmountRangeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getInputAmountRange(): ethereum.CallResult<
    OptionPool__getInputAmountRangeResult
  > {
    let result = super.tryCall(
      "getInputAmountRange",
      "getInputAmountRange():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getInputAmountRangeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getMultiSignatureAddress(): Address {
    let result = super.call(
      "getMultiSignatureAddress",
      "getMultiSignatureAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getMultiSignatureAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMultiSignatureAddress",
      "getMultiSignatureAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNetWrothCalInfo(
    param0: Array<Address>
  ): OptionPool__getNetWrothCalInfoResult {
    let result = super.call(
      "getNetWrothCalInfo",
      "getNetWrothCalInfo(address[]):(uint256,int256[])",
      [ethereum.Value.fromAddressArray(param0)]
    );

    return new OptionPool__getNetWrothCalInfoResult(
      result[0].toBigInt(),
      result[1].toBigIntArray()
    );
  }

  try_getNetWrothCalInfo(
    param0: Array<Address>
  ): ethereum.CallResult<OptionPool__getNetWrothCalInfoResult> {
    let result = super.tryCall(
      "getNetWrothCalInfo",
      "getNetWrothCalInfo(address[]):(uint256,int256[])",
      [ethereum.Value.fromAddressArray(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getNetWrothCalInfoResult(
        value[0].toBigInt(),
        value[1].toBigIntArray()
      )
    );
  }

  getOccupiedCalInfo(): OptionPool__getOccupiedCalInfoResult {
    let result = super.call(
      "getOccupiedCalInfo",
      "getOccupiedCalInfo():(uint256,int256[],int256[])",
      []
    );

    return new OptionPool__getOccupiedCalInfoResult(
      result[0].toBigInt(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray()
    );
  }

  try_getOccupiedCalInfo(): ethereum.CallResult<
    OptionPool__getOccupiedCalInfoResult
  > {
    let result = super.tryCall(
      "getOccupiedCalInfo",
      "getOccupiedCalInfo():(uint256,int256[],int256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getOccupiedCalInfoResult(
        value[0].toBigInt(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray()
      )
    );
  }

  getOperator(index: BigInt): Address {
    let result = super.call("getOperator", "getOperator(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toAddress();
  }

  try_getOperator(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOperator",
      "getOperator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOptionCalRangeAll(
    param0: Array<Address>
  ): OptionPool__getOptionCalRangeAllResult {
    let result = super.call(
      "getOptionCalRangeAll",
      "getOptionCalRangeAll(address[]):(uint256,int256[],int256[],uint256,int256[],uint256,uint256)",
      [ethereum.Value.fromAddressArray(param0)]
    );

    return new OptionPool__getOptionCalRangeAllResult(
      result[0].toBigInt(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigInt(),
      result[4].toBigIntArray(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_getOptionCalRangeAll(
    param0: Array<Address>
  ): ethereum.CallResult<OptionPool__getOptionCalRangeAllResult> {
    let result = super.tryCall(
      "getOptionCalRangeAll",
      "getOptionCalRangeAll(address[]):(uint256,int256[],int256[],uint256,int256[],uint256,uint256)",
      [ethereum.Value.fromAddressArray(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getOptionCalRangeAllResult(
        value[0].toBigInt(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigInt(),
        value[4].toBigIntArray(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  getOptionInfoLength(): BigInt {
    let result = super.call(
      "getOptionInfoLength",
      "getOptionInfoLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getOptionInfoLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOptionInfoLength",
      "getOptionInfoLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOptionInfoList(
    from: BigInt,
    size: BigInt
  ): OptionPool__getOptionInfoListResult {
    let result = super.call(
      "getOptionInfoList",
      "getOptionInfoList(uint256,uint256):(address[],uint256[],uint256[],uint256[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(from),
        ethereum.Value.fromUnsignedBigInt(size)
      ]
    );

    return new OptionPool__getOptionInfoListResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray(),
      result[4].toBigIntArray()
    );
  }

  try_getOptionInfoList(
    from: BigInt,
    size: BigInt
  ): ethereum.CallResult<OptionPool__getOptionInfoListResult> {
    let result = super.tryCall(
      "getOptionInfoList",
      "getOptionInfoList(uint256,uint256):(address[],uint256[],uint256[],uint256[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(from),
        ethereum.Value.fromUnsignedBigInt(size)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getOptionInfoListResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray(),
        value[4].toBigIntArray()
      )
    );
  }

  getOptionInfoListFromID(
    ids: Array<BigInt>
  ): OptionPool__getOptionInfoListFromIDResult {
    let result = super.call(
      "getOptionInfoListFromID",
      "getOptionInfoListFromID(uint64[]):(address[],uint256[],uint256[],uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(ids)]
    );

    return new OptionPool__getOptionInfoListFromIDResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray(),
      result[4].toBigIntArray()
    );
  }

  try_getOptionInfoListFromID(
    ids: Array<BigInt>
  ): ethereum.CallResult<OptionPool__getOptionInfoListFromIDResult> {
    let result = super.tryCall(
      "getOptionInfoListFromID",
      "getOptionInfoListFromID(uint64[]):(address[],uint256[],uint256[],uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(ids)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getOptionInfoListFromIDResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray(),
        value[4].toBigIntArray()
      )
    );
  }

  getOptionsById(optionsId: BigInt): OptionPool__getOptionsByIdResult {
    let result = super.call(
      "getOptionsById",
      "getOptionsById(uint256):(uint256,address,uint8,uint32,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(optionsId)]
    );

    return new OptionPool__getOptionsByIdResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_getOptionsById(
    optionsId: BigInt
  ): ethereum.CallResult<OptionPool__getOptionsByIdResult> {
    let result = super.tryCall(
      "getOptionsById",
      "getOptionsById(uint256):(uint256,address,uint8,uint32,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(optionsId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getOptionsByIdResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  getOptionsExtraById(
    optionsId: BigInt
  ): OptionPool__getOptionsExtraByIdResult {
    let result = super.call(
      "getOptionsExtraById",
      "getOptionsExtraById(uint256):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(optionsId)]
    );

    return new OptionPool__getOptionsExtraByIdResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getOptionsExtraById(
    optionsId: BigInt
  ): ethereum.CallResult<OptionPool__getOptionsExtraByIdResult> {
    let result = super.tryCall(
      "getOptionsExtraById",
      "getOptionsExtraById(uint256):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(optionsId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getOptionsExtraByIdResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getOptionsLimitTimeById(optionsId: BigInt): BigInt {
    let result = super.call(
      "getOptionsLimitTimeById",
      "getOptionsLimitTimeById(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(optionsId)]
    );

    return result[0].toBigInt();
  }

  try_getOptionsLimitTimeById(optionsId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOptionsLimitTimeById",
      "getOptionsLimitTimeById(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(optionsId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOracleAddress(): Address {
    let result = super.call(
      "getOracleAddress",
      "getOracleAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getOracleAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOracleAddress",
      "getOracleAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTotalOccupiedCollateral(): BigInt {
    let result = super.call(
      "getTotalOccupiedCollateral",
      "getTotalOccupiedCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalOccupiedCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalOccupiedCollateral",
      "getTotalOccupiedCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnderlyingAssets(): Array<BigInt> {
    let result = super.call(
      "getUnderlyingAssets",
      "getUnderlyingAssets():(uint32[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getUnderlyingAssets(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUnderlyingAssets",
      "getUnderlyingAssets():(uint32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getUnderlyingTotalOccupiedCollateral(
    param0: BigInt
  ): OptionPool__getUnderlyingTotalOccupiedCollateralResult {
    let result = super.call(
      "getUnderlyingTotalOccupiedCollateral",
      "getUnderlyingTotalOccupiedCollateral(uint32):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new OptionPool__getUnderlyingTotalOccupiedCollateralResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getUnderlyingTotalOccupiedCollateral(
    param0: BigInt
  ): ethereum.CallResult<
    OptionPool__getUnderlyingTotalOccupiedCollateralResult
  > {
    let result = super.tryCall(
      "getUnderlyingTotalOccupiedCollateral",
      "getUnderlyingTotalOccupiedCollateral(uint32):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getUnderlyingTotalOccupiedCollateralResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getUserAllOptionInfo(user: Address): OptionPool__getUserAllOptionInfoResult {
    let result = super.call(
      "getUserAllOptionInfo",
      "getUserAllOptionInfo(address):(address[],uint256[],uint256[],uint256[],uint256[])",
      [ethereum.Value.fromAddress(user)]
    );

    return new OptionPool__getUserAllOptionInfoResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray(),
      result[4].toBigIntArray()
    );
  }

  try_getUserAllOptionInfo(
    user: Address
  ): ethereum.CallResult<OptionPool__getUserAllOptionInfoResult> {
    let result = super.tryCall(
      "getUserAllOptionInfo",
      "getUserAllOptionInfo(address):(address[],uint256[],uint256[],uint256[],uint256[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__getUserAllOptionInfoResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray(),
        value[4].toBigIntArray()
      )
    );
  }

  getUserOptionsID(user: Address): Array<BigInt> {
    let result = super.call(
      "getUserOptionsID",
      "getUserOptionsID(address):(uint64[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigIntArray();
  }

  try_getUserOptionsID(user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserOptionsID",
      "getUserOptionsID(address):(uint64[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getUserOptionsID1(user: Address, from: BigInt, size: BigInt): Array<BigInt> {
    let result = super.call(
      "getUserOptionsID",
      "getUserOptionsID(address,uint256,uint256):(uint64[])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(from),
        ethereum.Value.fromUnsignedBigInt(size)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getUserOptionsID1(
    user: Address,
    from: BigInt,
    size: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserOptionsID",
      "getUserOptionsID(address,uint256,uint256):(uint64[])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(from),
        ethereum.Value.fromUnsignedBigInt(size)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  implementationVersion(): BigInt {
    let result = super.call(
      "implementationVersion",
      "implementationVersion():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_implementationVersion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "implementationVersion",
      "implementationVersion():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isEligibleExpiration(expiration: BigInt): boolean {
    let result = super.call(
      "isEligibleExpiration",
      "isEligibleExpiration(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(expiration)]
    );

    return result[0].toBoolean();
  }

  try_isEligibleExpiration(expiration: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEligibleExpiration",
      "isEligibleExpiration(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(expiration)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isInputAmountInRange(amount: BigInt): boolean {
    let result = super.call(
      "isInputAmountInRange",
      "isInputAmountInRange(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBoolean();
  }

  try_isInputAmountInRange(amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInputAmountInRange",
      "isInputAmountInRange(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  limitation(): BigInt {
    let result = super.call("limitation", "limitation():(uint256)", []);

    return result[0].toBigInt();
  }

  try_limitation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("limitation", "limitation():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  netWorthFirstOption(): BigInt {
    let result = super.call(
      "netWorthFirstOption",
      "netWorthFirstOption():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_netWorthFirstOption(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "netWorthFirstOption",
      "netWorthFirstOption():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  optionsBalances(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "optionsBalances",
      "optionsBalances(address,uint256):(uint64)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_optionsBalances(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "optionsBalances",
      "optionsBalances(address,uint256):(uint64)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  optionsLatestNetWorth(param0: Address): BigInt {
    let result = super.call(
      "optionsLatestNetWorth",
      "optionsLatestNetWorth(address):(int256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_optionsLatestNetWorth(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "optionsLatestNetWorth",
      "optionsLatestNetWorth(address):(int256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  optionsPrice(): Address {
    let result = super.call("optionsPrice", "optionsPrice():(address)", []);

    return result[0].toAddress();
  }

  try_optionsPrice(): ethereum.CallResult<Address> {
    let result = super.tryCall("optionsPrice", "optionsPrice():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerExpiredTime(): BigInt {
    let result = super.call(
      "ownerExpiredTime",
      "ownerExpiredTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ownerExpiredTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownerExpiredTime",
      "ownerExpiredTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  removeExpirationList(removeExpiration: BigInt): boolean {
    let result = super.call(
      "removeExpirationList",
      "removeExpirationList(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(removeExpiration)]
    );

    return result[0].toBoolean();
  }

  try_removeExpirationList(
    removeExpiration: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removeExpirationList",
      "removeExpirationList(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(removeExpiration)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  removeUnderlyingAssets(removeUnderlying: BigInt): boolean {
    let result = super.call(
      "removeUnderlyingAssets",
      "removeUnderlyingAssets(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(removeUnderlying)]
    );

    return result[0].toBoolean();
  }

  try_removeUnderlyingAssets(
    removeUnderlying: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removeUnderlyingAssets",
      "removeUnderlyingAssets(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(removeUnderlying)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  txOrigin(): Address {
    let result = super.call("txOrigin", "txOrigin():(address)", []);

    return result[0].toAddress();
  }

  try_txOrigin(): ethereum.CallResult<Address> {
    let result = super.tryCall("txOrigin", "txOrigin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  underlyingAssets(param0: BigInt): BigInt {
    let result = super.call(
      "underlyingAssets",
      "underlyingAssets(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_underlyingAssets(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "underlyingAssets",
      "underlyingAssets(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlyingOccupiedMap(
    param0: BigInt
  ): OptionPool__underlyingOccupiedMapResult {
    let result = super.call(
      "underlyingOccupiedMap",
      "underlyingOccupiedMap(uint32):(uint256,uint256,int256,int256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new OptionPool__underlyingOccupiedMapResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_underlyingOccupiedMap(
    param0: BigInt
  ): ethereum.CallResult<OptionPool__underlyingOccupiedMapResult> {
    let result = super.tryCall(
      "underlyingOccupiedMap",
      "underlyingOccupiedMap(uint32):(uint256,uint256,int256,int256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionPool__underlyingOccupiedMapResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  underlyingTotalOccupied(): BigInt {
    let result = super.call(
      "underlyingTotalOccupied",
      "underlyingTotalOccupied():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_underlyingTotalOccupied(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "underlyingTotalOccupied",
      "underlyingTotalOccupied():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  volatility(): Address {
    let result = super.call("volatility", "volatility():(address)", []);

    return result[0].toAddress();
  }

  try_volatility(): ethereum.CallResult<Address> {
    let result = super.tryCall("volatility", "volatility():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get multiSignatureClient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddExpirationCall extends ethereum.Call {
  get inputs(): AddExpirationCall__Inputs {
    return new AddExpirationCall__Inputs(this);
  }

  get outputs(): AddExpirationCall__Outputs {
    return new AddExpirationCall__Outputs(this);
  }
}

export class AddExpirationCall__Inputs {
  _call: AddExpirationCall;

  constructor(call: AddExpirationCall) {
    this._call = call;
  }

  get expiration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddExpirationCall__Outputs {
  _call: AddExpirationCall;

  constructor(call: AddExpirationCall) {
    this._call = call;
  }
}

export class AddUnderlyingAssetCall extends ethereum.Call {
  get inputs(): AddUnderlyingAssetCall__Inputs {
    return new AddUnderlyingAssetCall__Inputs(this);
  }

  get outputs(): AddUnderlyingAssetCall__Outputs {
    return new AddUnderlyingAssetCall__Outputs(this);
  }
}

export class AddUnderlyingAssetCall__Inputs {
  _call: AddUnderlyingAssetCall;

  constructor(call: AddUnderlyingAssetCall) {
    this._call = call;
  }

  get underlying(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddUnderlyingAssetCall__Outputs {
  _call: AddUnderlyingAssetCall;

  constructor(call: AddUnderlyingAssetCall) {
    this._call = call;
  }
}

export class BurnOptionsCall extends ethereum.Call {
  get inputs(): BurnOptionsCall__Inputs {
    return new BurnOptionsCall__Inputs(this);
  }

  get outputs(): BurnOptionsCall__Outputs {
    return new BurnOptionsCall__Outputs(this);
  }
}

export class BurnOptionsCall__Inputs {
  _call: BurnOptionsCall;

  constructor(call: BurnOptionsCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get optionPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BurnOptionsCall__Outputs {
  _call: BurnOptionsCall;

  constructor(call: BurnOptionsCall) {
    this._call = call;
  }
}

export class CreateOptionsCall extends ethereum.Call {
  get inputs(): CreateOptionsCall__Inputs {
    return new CreateOptionsCall__Inputs(this);
  }

  get outputs(): CreateOptionsCall__Outputs {
    return new CreateOptionsCall__Outputs(this);
  }
}

export class CreateOptionsCall__Inputs {
  _call: CreateOptionsCall;

  constructor(call: CreateOptionsCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get settlement(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get type_ly_expiration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get strikePrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get underlyingPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get settlePrice(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CreateOptionsCall__Outputs {
  _call: CreateOptionsCall;

  constructor(call: CreateOptionsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DelegateToImplementationCall extends ethereum.Call {
  get inputs(): DelegateToImplementationCall__Inputs {
    return new DelegateToImplementationCall__Inputs(this);
  }

  get outputs(): DelegateToImplementationCall__Outputs {
    return new DelegateToImplementationCall__Outputs(this);
  }
}

export class DelegateToImplementationCall__Inputs {
  _call: DelegateToImplementationCall;

  constructor(call: DelegateToImplementationCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class DelegateToImplementationCall__Outputs {
  _call: DelegateToImplementationCall;

  constructor(call: DelegateToImplementationCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class InitAddressesCall extends ethereum.Call {
  get inputs(): InitAddressesCall__Inputs {
    return new InitAddressesCall__Inputs(this);
  }

  get outputs(): InitAddressesCall__Outputs {
    return new InitAddressesCall__Outputs(this);
  }
}

export class InitAddressesCall__Inputs {
  _call: InitAddressesCall;

  constructor(call: InitAddressesCall) {
    this._call = call;
  }

  get optionsCalAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oracleAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get optionsPriceAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get ivAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get underlyings(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class InitAddressesCall__Outputs {
  _call: InitAddressesCall;

  constructor(call: InitAddressesCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemoveExpirationListCall extends ethereum.Call {
  get inputs(): RemoveExpirationListCall__Inputs {
    return new RemoveExpirationListCall__Inputs(this);
  }

  get outputs(): RemoveExpirationListCall__Outputs {
    return new RemoveExpirationListCall__Outputs(this);
  }
}

export class RemoveExpirationListCall__Inputs {
  _call: RemoveExpirationListCall;

  constructor(call: RemoveExpirationListCall) {
    this._call = call;
  }

  get removeExpiration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveExpirationListCall__Outputs {
  _call: RemoveExpirationListCall;

  constructor(call: RemoveExpirationListCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveUnderlyingAssetsCall extends ethereum.Call {
  get inputs(): RemoveUnderlyingAssetsCall__Inputs {
    return new RemoveUnderlyingAssetsCall__Inputs(this);
  }

  get outputs(): RemoveUnderlyingAssetsCall__Outputs {
    return new RemoveUnderlyingAssetsCall__Outputs(this);
  }
}

export class RemoveUnderlyingAssetsCall__Inputs {
  _call: RemoveUnderlyingAssetsCall;

  constructor(call: RemoveUnderlyingAssetsCall) {
    this._call = call;
  }

  get removeUnderlying(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveUnderlyingAssetsCall__Outputs {
  _call: RemoveUnderlyingAssetsCall;

  constructor(call: RemoveUnderlyingAssetsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetCollateralPhaseCall extends ethereum.Call {
  get inputs(): SetCollateralPhaseCall__Inputs {
    return new SetCollateralPhaseCall__Inputs(this);
  }

  get outputs(): SetCollateralPhaseCall__Outputs {
    return new SetCollateralPhaseCall__Outputs(this);
  }
}

export class SetCollateralPhaseCall__Inputs {
  _call: SetCollateralPhaseCall;

  constructor(call: SetCollateralPhaseCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get value1(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class SetCollateralPhaseCall__Outputs {
  _call: SetCollateralPhaseCall;

  constructor(call: SetCollateralPhaseCall) {
    this._call = call;
  }
}

export class SetInputAmountRangeCall extends ethereum.Call {
  get inputs(): SetInputAmountRangeCall__Inputs {
    return new SetInputAmountRangeCall__Inputs(this);
  }

  get outputs(): SetInputAmountRangeCall__Outputs {
    return new SetInputAmountRangeCall__Outputs(this);
  }
}

export class SetInputAmountRangeCall__Inputs {
  _call: SetInputAmountRangeCall;

  constructor(call: SetInputAmountRangeCall) {
    this._call = call;
  }

  get _minAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetInputAmountRangeCall__Outputs {
  _call: SetInputAmountRangeCall;

  constructor(call: SetInputAmountRangeCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}

export class SetOccupiedCollateralCall extends ethereum.Call {
  get inputs(): SetOccupiedCollateralCall__Inputs {
    return new SetOccupiedCollateralCall__Inputs(this);
  }

  get outputs(): SetOccupiedCollateralCall__Outputs {
    return new SetOccupiedCollateralCall__Outputs(this);
  }
}

export class SetOccupiedCollateralCall__Inputs {
  _call: SetOccupiedCollateralCall;

  constructor(call: SetOccupiedCollateralCall) {
    this._call = call;
  }
}

export class SetOccupiedCollateralCall__Outputs {
  _call: SetOccupiedCollateralCall;

  constructor(call: SetOccupiedCollateralCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetOptionsNetWorthCalCall extends ethereum.Call {
  get inputs(): SetOptionsNetWorthCalCall__Inputs {
    return new SetOptionsNetWorthCalCall__Inputs(this);
  }

  get outputs(): SetOptionsNetWorthCalCall__Outputs {
    return new SetOptionsNetWorthCalCall__Outputs(this);
  }
}

export class SetOptionsNetWorthCalCall__Inputs {
  _call: SetOptionsNetWorthCalCall;

  constructor(call: SetOptionsNetWorthCalCall) {
    this._call = call;
  }

  get _OptionsCal(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOptionsNetWorthCalCall__Outputs {
  _call: SetOptionsNetWorthCalCall;

  constructor(call: SetOptionsNetWorthCalCall) {
    this._call = call;
  }
}

export class SetOracleAddressCall extends ethereum.Call {
  get inputs(): SetOracleAddressCall__Inputs {
    return new SetOracleAddressCall__Inputs(this);
  }

  get outputs(): SetOracleAddressCall__Outputs {
    return new SetOracleAddressCall__Outputs(this);
  }
}

export class SetOracleAddressCall__Inputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }

  get oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleAddressCall__Outputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }
}

export class SetSharedStateCall extends ethereum.Call {
  get inputs(): SetSharedStateCall__Inputs {
    return new SetSharedStateCall__Inputs(this);
  }

  get outputs(): SetSharedStateCall__Outputs {
    return new SetSharedStateCall__Outputs(this);
  }
}

export class SetSharedStateCall__Inputs {
  _call: SetSharedStateCall;

  constructor(call: SetSharedStateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value1(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get value2(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class SetSharedStateCall__Outputs {
  _call: SetSharedStateCall;

  constructor(call: SetSharedStateCall) {
    this._call = call;
  }
}

export class SetTimeLimitationCall extends ethereum.Call {
  get inputs(): SetTimeLimitationCall__Inputs {
    return new SetTimeLimitationCall__Inputs(this);
  }

  get outputs(): SetTimeLimitationCall__Outputs {
    return new SetTimeLimitationCall__Outputs(this);
  }
}

export class SetTimeLimitationCall__Inputs {
  _call: SetTimeLimitationCall;

  constructor(call: SetTimeLimitationCall) {
    this._call = call;
  }

  get _limit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTimeLimitationCall__Outputs {
  _call: SetTimeLimitationCall;

  constructor(call: SetTimeLimitationCall) {
    this._call = call;
  }
}

export class SetUnderlyingAssetCall extends ethereum.Call {
  get inputs(): SetUnderlyingAssetCall__Inputs {
    return new SetUnderlyingAssetCall__Inputs(this);
  }

  get outputs(): SetUnderlyingAssetCall__Outputs {
    return new SetUnderlyingAssetCall__Outputs(this);
  }
}

export class SetUnderlyingAssetCall__Inputs {
  _call: SetUnderlyingAssetCall;

  constructor(call: SetUnderlyingAssetCall) {
    this._call = call;
  }

  get underlyings(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetUnderlyingAssetCall__Outputs {
  _call: SetUnderlyingAssetCall;

  constructor(call: SetUnderlyingAssetCall) {
    this._call = call;
  }
}

export class SetVolatilityAddressCall extends ethereum.Call {
  get inputs(): SetVolatilityAddressCall__Inputs {
    return new SetVolatilityAddressCall__Inputs(this);
  }

  get outputs(): SetVolatilityAddressCall__Outputs {
    return new SetVolatilityAddressCall__Outputs(this);
  }
}

export class SetVolatilityAddressCall__Inputs {
  _call: SetVolatilityAddressCall;

  constructor(call: SetVolatilityAddressCall) {
    this._call = call;
  }

  get _volatility(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVolatilityAddressCall__Outputs {
  _call: SetVolatilityAddressCall;

  constructor(call: SetVolatilityAddressCall) {
    this._call = call;
  }
}

export class TransferOriginCall extends ethereum.Call {
  get inputs(): TransferOriginCall__Inputs {
    return new TransferOriginCall__Inputs(this);
  }

  get outputs(): TransferOriginCall__Outputs {
    return new TransferOriginCall__Outputs(this);
  }
}

export class TransferOriginCall__Inputs {
  _call: TransferOriginCall;

  constructor(call: TransferOriginCall) {
    this._call = call;
  }

  get _newOrigin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOriginCall__Outputs {
  _call: TransferOriginCall;

  constructor(call: TransferOriginCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
