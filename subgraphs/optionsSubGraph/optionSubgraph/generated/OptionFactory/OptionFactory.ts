// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CreateOptionsManager extends ethereum.Event {
  get params(): CreateOptionsManager__Params {
    return new CreateOptionsManager__Params(this);
  }
}

export class CreateOptionsManager__Params {
  _event: CreateOptionsManager;

  constructor(event: CreateOptionsManager) {
    this._event = event;
  }

  get optionsManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateralPool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get optionsPool(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get pptCoin(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class DebugEvent extends ethereum.Event {
  get params(): DebugEvent__Params {
    return new DebugEvent__Params(this);
  }
}

export class DebugEvent__Params {
  _event: DebugEvent;

  constructor(event: DebugEvent) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get msgHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get value1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OperatorTransferred extends ethereum.Event {
  get params(): OperatorTransferred__Params {
    return new OperatorTransferred__Params(this);
  }
}

export class OperatorTransferred__Params {
  _event: OperatorTransferred;

  constructor(event: OperatorTransferred) {
    this._event = event;
  }

  get previousOperator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOperator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OriginTransferred extends ethereum.Event {
  get params(): OriginTransferred__Params {
    return new OriginTransferred__Params(this);
  }
}

export class OriginTransferred__Params {
  _event: OriginTransferred;

  constructor(event: OriginTransferred) {
    this._event = event;
  }

  get previousOrigin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOrigin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OptionFactory__getOptionsMangerAddressResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }
}

export class OptionFactory extends ethereum.SmartContract {
  static bind(address: Address): OptionFactory {
    return new OptionFactory("OptionFactory", address);
  }

  MinePoolID(): BigInt {
    let result = super.call("MinePoolID", "MinePoolID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MinePoolID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MinePoolID", "MinePoolID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PPTTimeLimit(): BigInt {
    let result = super.call("PPTTimeLimit", "PPTTimeLimit():(uint64)", []);

    return result[0].toBigInt();
  }

  try_PPTTimeLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PPTTimeLimit", "PPTTimeLimit():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PPTTokenID(): BigInt {
    let result = super.call("PPTTokenID", "PPTTokenID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PPTTokenID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PPTTokenID", "PPTTokenID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PPTname(): i32 {
    let result = super.call("PPTname", "PPTname():(uint8)", []);

    return result[0].toI32();
  }

  try_PPTname(): ethereum.CallResult<i32> {
    let result = super.tryCall("PPTname", "PPTname():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  baseCoinName(): string {
    let result = super.call("baseCoinName", "baseCoinName():(string)", []);

    return result[0].toString();
  }

  try_baseCoinName(): ethereum.CallResult<string> {
    let result = super.tryCall("baseCoinName", "baseCoinName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  collateralPoolID(): BigInt {
    let result = super.call(
      "collateralPoolID",
      "collateralPoolID():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_collateralPoolID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralPoolID",
      "collateralPoolID():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMultiSignatureAddress(): Address {
    let result = super.call(
      "getMultiSignatureAddress",
      "getMultiSignatureAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getMultiSignatureAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMultiSignatureAddress",
      "getMultiSignatureAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOperator(index: BigInt): Address {
    let result = super.call("getOperator", "getOperator(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toAddress();
  }

  try_getOperator(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOperator",
      "getOperator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOptionsMangerAddress(
    index: BigInt
  ): OptionFactory__getOptionsMangerAddressResult {
    let result = super.call(
      "getOptionsMangerAddress",
      "getOptionsMangerAddress(uint256):(address,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return new OptionFactory__getOptionsMangerAddressResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress()
    );
  }

  try_getOptionsMangerAddress(
    index: BigInt
  ): ethereum.CallResult<OptionFactory__getOptionsMangerAddressResult> {
    let result = super.tryCall(
      "getOptionsMangerAddress",
      "getOptionsMangerAddress(uint256):(address,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__getOptionsMangerAddressResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress()
      )
    );
  }

  getOptionsMangerLength(): BigInt {
    let result = super.call(
      "getOptionsMangerLength",
      "getOptionsMangerLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getOptionsMangerLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOptionsMangerLength",
      "getOptionsMangerLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  implementationVersion(): BigInt {
    let result = super.call(
      "implementationVersion",
      "implementationVersion():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_implementationVersion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "implementationVersion",
      "implementationVersion():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  impliedVolatility(): Address {
    let result = super.call(
      "impliedVolatility",
      "impliedVolatility():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_impliedVolatility(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "impliedVolatility",
      "impliedVolatility():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  optionsCal(): Address {
    let result = super.call("optionsCal", "optionsCal():(address)", []);

    return result[0].toAddress();
  }

  try_optionsCal(): ethereum.CallResult<Address> {
    let result = super.tryCall("optionsCal", "optionsCal():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  optionsManagerID(): BigInt {
    let result = super.call(
      "optionsManagerID",
      "optionsManagerID():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_optionsManagerID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "optionsManagerID",
      "optionsManagerID():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  optionsPoolID(): BigInt {
    let result = super.call("optionsPoolID", "optionsPoolID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_optionsPoolID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "optionsPoolID",
      "optionsPoolID():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  optionsPrice(): Address {
    let result = super.call("optionsPrice", "optionsPrice():(address)", []);

    return result[0].toAddress();
  }

  try_optionsPrice(): ethereum.CallResult<Address> {
    let result = super.tryCall("optionsPrice", "optionsPrice():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerExpiredTime(): BigInt {
    let result = super.call(
      "ownerExpiredTime",
      "ownerExpiredTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ownerExpiredTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownerExpiredTime",
      "ownerExpiredTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  phxOracle(): Address {
    let result = super.call("phxOracle", "phxOracle():(address)", []);

    return result[0].toAddress();
  }

  try_phxOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("phxOracle", "phxOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxyinfoMap(param0: BigInt): Address {
    let result = super.call("proxyinfoMap", "proxyinfoMap(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_proxyinfoMap(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "proxyinfoMap",
      "proxyinfoMap(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  txOrigin(): Address {
    let result = super.call("txOrigin", "txOrigin():(address)", []);

    return result[0].toAddress();
  }

  try_txOrigin(): ethereum.CallResult<Address> {
    let result = super.tryCall("txOrigin", "txOrigin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vestingPool(): Address {
    let result = super.call("vestingPool", "vestingPool():(address)", []);

    return result[0].toAddress();
  }

  try_vestingPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("vestingPool", "vestingPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get multiSignature(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateOptionsManagerCall extends ethereum.Call {
  get inputs(): CreateOptionsManagerCall__Inputs {
    return new CreateOptionsManagerCall__Inputs(this);
  }

  get outputs(): CreateOptionsManagerCall__Outputs {
    return new CreateOptionsManagerCall__Outputs(this);
  }
}

export class CreateOptionsManagerCall__Inputs {
  _call: CreateOptionsManagerCall;

  constructor(call: CreateOptionsManagerCall) {
    this._call = call;
  }

  get collateral(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get rate(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get underlyings(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class CreateOptionsManagerCall__Outputs {
  _call: CreateOptionsManagerCall;

  constructor(call: CreateOptionsManagerCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetImplementAddressCall extends ethereum.Call {
  get inputs(): SetImplementAddressCall__Inputs {
    return new SetImplementAddressCall__Inputs(this);
  }

  get outputs(): SetImplementAddressCall__Outputs {
    return new SetImplementAddressCall__Outputs(this);
  }
}

export class SetImplementAddressCall__Inputs {
  _call: SetImplementAddressCall;

  constructor(call: SetImplementAddressCall) {
    this._call = call;
  }

  get _baseCoinName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _optionsCalImpl(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _optionsPoolImpl(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _collateralPoolImpl(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _optionsManagerImpl(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _PPTCoinImpl(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get acceleratedMinePool(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get phxVestingPool(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _phxOracle(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get _volatility(): Address {
    return this._call.inputValues[9].value.toAddress();
  }

  get _optionsPrice(): Address {
    return this._call.inputValues[10].value.toAddress();
  }
}

export class SetImplementAddressCall__Outputs {
  _call: SetImplementAddressCall;

  constructor(call: SetImplementAddressCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetOracleAddressCall extends ethereum.Call {
  get inputs(): SetOracleAddressCall__Inputs {
    return new SetOracleAddressCall__Inputs(this);
  }

  get outputs(): SetOracleAddressCall__Outputs {
    return new SetOracleAddressCall__Outputs(this);
  }
}

export class SetOracleAddressCall__Inputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }

  get _phxOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleAddressCall__Outputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }
}

export class SetPHXVestingPoolCall extends ethereum.Call {
  get inputs(): SetPHXVestingPoolCall__Inputs {
    return new SetPHXVestingPoolCall__Inputs(this);
  }

  get outputs(): SetPHXVestingPoolCall__Outputs {
    return new SetPHXVestingPoolCall__Outputs(this);
  }
}

export class SetPHXVestingPoolCall__Inputs {
  _call: SetPHXVestingPoolCall;

  constructor(call: SetPHXVestingPoolCall) {
    this._call = call;
  }

  get _PHXVestingPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPHXVestingPoolCall__Outputs {
  _call: SetPHXVestingPoolCall;

  constructor(call: SetPHXVestingPoolCall) {
    this._call = call;
  }
}

export class SetPPTTimeLimitCall extends ethereum.Call {
  get inputs(): SetPPTTimeLimitCall__Inputs {
    return new SetPPTTimeLimitCall__Inputs(this);
  }

  get outputs(): SetPPTTimeLimitCall__Outputs {
    return new SetPPTTimeLimitCall__Outputs(this);
  }
}

export class SetPPTTimeLimitCall__Inputs {
  _call: SetPPTTimeLimitCall;

  constructor(call: SetPPTTimeLimitCall) {
    this._call = call;
  }

  get _PPTTimeLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPPTTimeLimitCall__Outputs {
  _call: SetPPTTimeLimitCall;

  constructor(call: SetPPTTimeLimitCall) {
    this._call = call;
  }
}

export class TransferOriginCall extends ethereum.Call {
  get inputs(): TransferOriginCall__Inputs {
    return new TransferOriginCall__Inputs(this);
  }

  get outputs(): TransferOriginCall__Outputs {
    return new TransferOriginCall__Outputs(this);
  }
}

export class TransferOriginCall__Inputs {
  _call: TransferOriginCall;

  constructor(call: TransferOriginCall) {
    this._call = call;
  }

  get _newOrigin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOriginCall__Outputs {
  _call: TransferOriginCall;

  constructor(call: TransferOriginCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateCall extends ethereum.Call {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class UpgradePhxProxyCall extends ethereum.Call {
  get inputs(): UpgradePhxProxyCall__Inputs {
    return new UpgradePhxProxyCall__Inputs(this);
  }

  get outputs(): UpgradePhxProxyCall__Outputs {
    return new UpgradePhxProxyCall__Outputs(this);
  }
}

export class UpgradePhxProxyCall__Inputs {
  _call: UpgradePhxProxyCall;

  constructor(call: UpgradePhxProxyCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get implementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpgradePhxProxyCall__Outputs {
  _call: UpgradePhxProxyCall;

  constructor(call: UpgradePhxProxyCall) {
    this._call = call;
  }
}
