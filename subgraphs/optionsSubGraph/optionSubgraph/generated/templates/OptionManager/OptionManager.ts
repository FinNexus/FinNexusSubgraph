// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddCollateral extends ethereum.Event {
  get params(): AddCollateral__Params {
    return new AddCollateral__Params(this);
  }
}

export class AddCollateral__Params {
  _event: AddCollateral;

  constructor(event: AddCollateral) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BuyOption extends ethereum.Event {
  get params(): BuyOption__Params {
    return new BuyOption__Params(this);
  }
}

export class BuyOption__Params {
  _event: BuyOption;

  constructor(event: BuyOption) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get settlement(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get optionPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get settlementAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get optionAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class DebugEvent extends ethereum.Event {
  get params(): DebugEvent__Params {
    return new DebugEvent__Params(this);
  }
}

export class DebugEvent__Params {
  _event: DebugEvent;

  constructor(event: DebugEvent) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DebugEvent1 extends ethereum.Event {
  get params(): DebugEvent1__Params {
    return new DebugEvent1__Params(this);
  }
}

export class DebugEvent1__Params {
  _event: DebugEvent1;

  constructor(event: DebugEvent1) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get msgHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get value1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ExerciseOption extends ethereum.Event {
  get params(): ExerciseOption__Params {
    return new ExerciseOption__Params(this);
  }
}

export class ExerciseOption__Params {
  _event: ExerciseOption;

  constructor(event: ExerciseOption) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get optionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sellValue(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OriginTransferred extends ethereum.Event {
  get params(): OriginTransferred__Params {
    return new OriginTransferred__Params(this);
  }
}

export class OriginTransferred__Params {
  _event: OriginTransferred;

  constructor(event: OriginTransferred) {
    this._event = event;
  }

  get previousOrigin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOrigin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RedeemCollateral extends ethereum.Event {
  get params(): RedeemCollateral__Params {
    return new RedeemCollateral__Params(this);
  }
}

export class RedeemCollateral__Params {
  _event: RedeemCollateral;

  constructor(event: RedeemCollateral) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get allRedeem(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SellOption extends ethereum.Event {
  get params(): SellOption__Params {
    return new SellOption__Params(this);
  }
}

export class SellOption__Params {
  _event: SellOption;

  constructor(event: SellOption) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get optionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sellValue(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OptionManager__getInputAmountRangeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class OptionManager__getPriceRateRangeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class OptionManager extends ethereum.SmartContract {
  static bind(address: Address): OptionManager {
    return new OptionManager("OptionManager", address);
  }

  addressPermission(param0: Address): BigInt {
    let result = super.call(
      "addressPermission",
      "addressPermission(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_addressPermission(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addressPermission",
      "addressPermission(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calCollateralWorth(account: Address): Array<BigInt> {
    let result = super.call(
      "calCollateralWorth",
      "calCollateralWorth(address):(uint256[])",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigIntArray();
  }

  try_calCollateralWorth(account: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "calCollateralWorth",
      "calCollateralWorth(address):(uint256[])",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  calOptionsOccupied(
    strikePrice: BigInt,
    underlyingPrice: BigInt,
    amount: BigInt,
    optType: i32
  ): BigInt {
    let result = super.call(
      "calOptionsOccupied",
      "calOptionsOccupied(uint256,uint256,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strikePrice),
        ethereum.Value.fromUnsignedBigInt(underlyingPrice),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(optType))
      ]
    );

    return result[0].toBigInt();
  }

  try_calOptionsOccupied(
    strikePrice: BigInt,
    underlyingPrice: BigInt,
    amount: BigInt,
    optType: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calOptionsOccupied",
      "calOptionsOccupied(uint256,uint256,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strikePrice),
        ethereum.Value.fromUnsignedBigInt(underlyingPrice),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(optType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateCollateralRate(): BigInt {
    let result = super.call(
      "calculateCollateralRate",
      "calculateCollateralRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_calculateCollateralRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateCollateralRate",
      "calculateCollateralRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkAddressPermission(tmpAddress: Address, state: BigInt): boolean {
    let result = super.call(
      "checkAddressPermission",
      "checkAddressPermission(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(tmpAddress),
        ethereum.Value.fromUnsignedBigInt(state)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkAddressPermission(
    tmpAddress: Address,
    state: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkAddressPermission",
      "checkAddressPermission(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(tmpAddress),
        ethereum.Value.fromUnsignedBigInt(state)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  collateralPool(): Address {
    let result = super.call("collateralPool", "collateralPool():(address)", []);

    return result[0].toAddress();
  }

  try_collateralPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralPool",
      "collateralPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllRealBalance(): Array<BigInt> {
    let result = super.call(
      "getAllRealBalance",
      "getAllRealBalance():(int256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getAllRealBalance(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAllRealBalance",
      "getAllRealBalance():(int256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAvailableCollateral(): BigInt {
    let result = super.call(
      "getAvailableCollateral",
      "getAvailableCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAvailableCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAvailableCollateral",
      "getAvailableCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCollateralRate(collateral: Address): BigInt {
    let result = super.call(
      "getCollateralRate",
      "getCollateralRate(address):(uint256)",
      [ethereum.Value.fromAddress(collateral)]
    );

    return result[0].toBigInt();
  }

  try_getCollateralRate(collateral: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralRate",
      "getCollateralRate(address):(uint256)",
      [ethereum.Value.fromAddress(collateral)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCollateralWhiteList(): Array<Address> {
    let result = super.call(
      "getCollateralWhiteList",
      "getCollateralWhiteList():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getCollateralWhiteList(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getCollateralWhiteList",
      "getCollateralWhiteList():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getInputAmountRange(): OptionManager__getInputAmountRangeResult {
    let result = super.call(
      "getInputAmountRange",
      "getInputAmountRange():(uint256,uint256)",
      []
    );

    return new OptionManager__getInputAmountRangeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getInputAmountRange(): ethereum.CallResult<
    OptionManager__getInputAmountRangeResult
  > {
    let result = super.tryCall(
      "getInputAmountRange",
      "getInputAmountRange():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionManager__getInputAmountRangeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getLeftCollateral(): BigInt {
    let result = super.call(
      "getLeftCollateral",
      "getLeftCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLeftCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLeftCollateral",
      "getLeftCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMultiSignatureAddress(): Address {
    let result = super.call(
      "getMultiSignatureAddress",
      "getMultiSignatureAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getMultiSignatureAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMultiSignatureAddress",
      "getMultiSignatureAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNetWorthBalance(settlement: Address): BigInt {
    let result = super.call(
      "getNetWorthBalance",
      "getNetWorthBalance(address):(uint256)",
      [ethereum.Value.fromAddress(settlement)]
    );

    return result[0].toBigInt();
  }

  try_getNetWorthBalance(settlement: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNetWorthBalance",
      "getNetWorthBalance(address):(uint256)",
      [ethereum.Value.fromAddress(settlement)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOccupiedCollateral(): BigInt {
    let result = super.call(
      "getOccupiedCollateral",
      "getOccupiedCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getOccupiedCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOccupiedCollateral",
      "getOccupiedCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOptionsPrice(
    underlyingPrice: BigInt,
    strikePrice: BigInt,
    expiration: BigInt,
    underlying: BigInt,
    amount: BigInt,
    optType: i32
  ): BigInt {
    let result = super.call(
      "getOptionsPrice",
      "getOptionsPrice(uint256,uint256,uint256,uint32,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(underlyingPrice),
        ethereum.Value.fromUnsignedBigInt(strikePrice),
        ethereum.Value.fromUnsignedBigInt(expiration),
        ethereum.Value.fromUnsignedBigInt(underlying),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(optType))
      ]
    );

    return result[0].toBigInt();
  }

  try_getOptionsPrice(
    underlyingPrice: BigInt,
    strikePrice: BigInt,
    expiration: BigInt,
    underlying: BigInt,
    amount: BigInt,
    optType: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOptionsPrice",
      "getOptionsPrice(uint256,uint256,uint256,uint32,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(underlyingPrice),
        ethereum.Value.fromUnsignedBigInt(strikePrice),
        ethereum.Value.fromUnsignedBigInt(expiration),
        ethereum.Value.fromUnsignedBigInt(underlying),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(optType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOracleAddress(): Address {
    let result = super.call(
      "getOracleAddress",
      "getOracleAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getOracleAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOracleAddress",
      "getOracleAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPriceRateRange(): OptionManager__getPriceRateRangeResult {
    let result = super.call(
      "getPriceRateRange",
      "getPriceRateRange():(uint256,uint256)",
      []
    );

    return new OptionManager__getPriceRateRangeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getPriceRateRange(): ethereum.CallResult<
    OptionManager__getPriceRateRangeResult
  > {
    let result = super.tryCall(
      "getPriceRateRange",
      "getPriceRateRange():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionManager__getPriceRateRangeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getRealBalance(settlement: Address): BigInt {
    let result = super.call(
      "getRealBalance",
      "getRealBalance(address):(int256)",
      [ethereum.Value.fromAddress(settlement)]
    );

    return result[0].toBigInt();
  }

  try_getRealBalance(settlement: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRealBalance",
      "getRealBalance(address):(int256)",
      [ethereum.Value.fromAddress(settlement)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenNetworth(): BigInt {
    let result = super.call(
      "getTokenNetworth",
      "getTokenNetworth():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTokenNetworth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenNetworth",
      "getTokenNetworth():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalCollateral(): BigInt {
    let result = super.call(
      "getTotalCollateral",
      "getTotalCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalCollateral",
      "getTotalCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnlockedCollateral(): BigInt {
    let result = super.call(
      "getUnlockedCollateral",
      "getUnlockedCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getUnlockedCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUnlockedCollateral",
      "getUnlockedCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserPayingUsd(user: Address): BigInt {
    let result = super.call(
      "getUserPayingUsd",
      "getUserPayingUsd(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getUserPayingUsd(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserPayingUsd",
      "getUserPayingUsd(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserTotalWorth(account: Address): BigInt {
    let result = super.call(
      "getUserTotalWorth",
      "getUserTotalWorth(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getUserTotalWorth(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserTotalWorth",
      "getUserTotalWorth(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  implementationVersion(): BigInt {
    let result = super.call(
      "implementationVersion",
      "implementationVersion():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_implementationVersion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "implementationVersion",
      "implementationVersion():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isInputAmountInRange(amount: BigInt): boolean {
    let result = super.call(
      "isInputAmountInRange",
      "isInputAmountInRange(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBoolean();
  }

  try_isInputAmountInRange(amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInputAmountInRange",
      "isInputAmountInRange(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxPriceRate(): BigInt {
    let result = super.call("maxPriceRate", "maxPriceRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxPriceRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxPriceRate", "maxPriceRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minPriceRate(): BigInt {
    let result = super.call("minPriceRate", "minPriceRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minPriceRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minPriceRate", "minPriceRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  optionsPool(): Address {
    let result = super.call("optionsPool", "optionsPool():(address)", []);

    return result[0].toAddress();
  }

  try_optionsPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("optionsPool", "optionsPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  optionsPrice(): Address {
    let result = super.call("optionsPrice", "optionsPrice():(address)", []);

    return result[0].toAddress();
  }

  try_optionsPrice(): ethereum.CallResult<Address> {
    let result = super.tryCall("optionsPrice", "optionsPrice():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerExpiredTime(): BigInt {
    let result = super.call(
      "ownerExpiredTime",
      "ownerExpiredTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ownerExpiredTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownerExpiredTime",
      "ownerExpiredTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pptCoin(): Address {
    let result = super.call("pptCoin", "pptCoin():(address)", []);

    return result[0].toAddress();
  }

  try_pptCoin(): ethereum.CallResult<Address> {
    let result = super.tryCall("pptCoin", "pptCoin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  txOrigin(): Address {
    let result = super.call("txOrigin", "txOrigin():(address)", []);

    return result[0].toAddress();
  }

  try_txOrigin(): ethereum.CallResult<Address> {
    let result = super.tryCall("txOrigin", "txOrigin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userInputCollateral(user: Address, collateral: Address): BigInt {
    let result = super.call(
      "userInputCollateral",
      "userInputCollateral(address,address):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(collateral)]
    );

    return result[0].toBigInt();
  }

  try_userInputCollateral(
    user: Address,
    collateral: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userInputCollateral",
      "userInputCollateral(address,address):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(collateral)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get multiSignature(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCollateralCall extends ethereum.Call {
  get inputs(): AddCollateralCall__Inputs {
    return new AddCollateralCall__Inputs(this);
  }

  get outputs(): AddCollateralCall__Outputs {
    return new AddCollateralCall__Outputs(this);
  }
}

export class AddCollateralCall__Inputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }

  get collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddCollateralCall__Outputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }
}

export class BuyOptionCall extends ethereum.Call {
  get inputs(): BuyOptionCall__Inputs {
    return new BuyOptionCall__Inputs(this);
  }

  get outputs(): BuyOptionCall__Outputs {
    return new BuyOptionCall__Outputs(this);
  }
}

export class BuyOptionCall__Inputs {
  _call: BuyOptionCall;

  constructor(call: BuyOptionCall) {
    this._call = call;
  }

  get settlement(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get settlementAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get strikePrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get underlying(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get optType(): i32 {
    return this._call.inputValues[6].value.toI32();
  }
}

export class BuyOptionCall__Outputs {
  _call: BuyOptionCall;

  constructor(call: BuyOptionCall) {
    this._call = call;
  }
}

export class ExerciseOptionCall extends ethereum.Call {
  get inputs(): ExerciseOptionCall__Inputs {
    return new ExerciseOptionCall__Inputs(this);
  }

  get outputs(): ExerciseOptionCall__Outputs {
    return new ExerciseOptionCall__Outputs(this);
  }
}

export class ExerciseOptionCall__Inputs {
  _call: ExerciseOptionCall;

  constructor(call: ExerciseOptionCall) {
    this._call = call;
  }

  get optionsId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExerciseOptionCall__Outputs {
  _call: ExerciseOptionCall;

  constructor(call: ExerciseOptionCall) {
    this._call = call;
  }
}

export class InitAddressesCall extends ethereum.Call {
  get inputs(): InitAddressesCall__Inputs {
    return new InitAddressesCall__Inputs(this);
  }

  get outputs(): InitAddressesCall__Outputs {
    return new InitAddressesCall__Outputs(this);
  }
}

export class InitAddressesCall__Inputs {
  _call: InitAddressesCall;

  constructor(call: InitAddressesCall) {
    this._call = call;
  }

  get collateral(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get rate(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get oracleAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get optionsPriceAddr(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get optionsPoolAddr(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get collateralPoolAddr(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get PPTCoinAddr(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class InitAddressesCall__Outputs {
  _call: InitAddressesCall;

  constructor(call: InitAddressesCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ModifyPermissionCall extends ethereum.Call {
  get inputs(): ModifyPermissionCall__Inputs {
    return new ModifyPermissionCall__Inputs(this);
  }

  get outputs(): ModifyPermissionCall__Outputs {
    return new ModifyPermissionCall__Outputs(this);
  }
}

export class ModifyPermissionCall__Inputs {
  _call: ModifyPermissionCall;

  constructor(call: ModifyPermissionCall) {
    this._call = call;
  }

  get addAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get permission(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ModifyPermissionCall__Outputs {
  _call: ModifyPermissionCall;

  constructor(call: ModifyPermissionCall) {
    this._call = call;
  }
}

export class RedeemCollateralCall extends ethereum.Call {
  get inputs(): RedeemCollateralCall__Inputs {
    return new RedeemCollateralCall__Inputs(this);
  }

  get outputs(): RedeemCollateralCall__Outputs {
    return new RedeemCollateralCall__Outputs(this);
  }
}

export class RedeemCollateralCall__Inputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RedeemCollateralCall__Outputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }
}

export class SetCollateralPoolAddressCall extends ethereum.Call {
  get inputs(): SetCollateralPoolAddressCall__Inputs {
    return new SetCollateralPoolAddressCall__Inputs(this);
  }

  get outputs(): SetCollateralPoolAddressCall__Outputs {
    return new SetCollateralPoolAddressCall__Outputs(this);
  }
}

export class SetCollateralPoolAddressCall__Inputs {
  _call: SetCollateralPoolAddressCall;

  constructor(call: SetCollateralPoolAddressCall) {
    this._call = call;
  }

  get _collateralPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCollateralPoolAddressCall__Outputs {
  _call: SetCollateralPoolAddressCall;

  constructor(call: SetCollateralPoolAddressCall) {
    this._call = call;
  }
}

export class SetCollateralRateCall extends ethereum.Call {
  get inputs(): SetCollateralRateCall__Inputs {
    return new SetCollateralRateCall__Inputs(this);
  }

  get outputs(): SetCollateralRateCall__Outputs {
    return new SetCollateralRateCall__Outputs(this);
  }
}

export class SetCollateralRateCall__Inputs {
  _call: SetCollateralRateCall;

  constructor(call: SetCollateralRateCall) {
    this._call = call;
  }

  get collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get colRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetCollateralRateCall__Outputs {
  _call: SetCollateralRateCall;

  constructor(call: SetCollateralRateCall) {
    this._call = call;
  }
}

export class SetHaltCall extends ethereum.Call {
  get inputs(): SetHaltCall__Inputs {
    return new SetHaltCall__Inputs(this);
  }

  get outputs(): SetHaltCall__Outputs {
    return new SetHaltCall__Outputs(this);
  }
}

export class SetHaltCall__Inputs {
  _call: SetHaltCall;

  constructor(call: SetHaltCall) {
    this._call = call;
  }

  get halt(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetHaltCall__Outputs {
  _call: SetHaltCall;

  constructor(call: SetHaltCall) {
    this._call = call;
  }
}

export class SetInputAmountRangeCall extends ethereum.Call {
  get inputs(): SetInputAmountRangeCall__Inputs {
    return new SetInputAmountRangeCall__Inputs(this);
  }

  get outputs(): SetInputAmountRangeCall__Outputs {
    return new SetInputAmountRangeCall__Outputs(this);
  }
}

export class SetInputAmountRangeCall__Inputs {
  _call: SetInputAmountRangeCall;

  constructor(call: SetInputAmountRangeCall) {
    this._call = call;
  }

  get _minAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetInputAmountRangeCall__Outputs {
  _call: SetInputAmountRangeCall;

  constructor(call: SetInputAmountRangeCall) {
    this._call = call;
  }
}

export class SetOptionsPoolAddressCall extends ethereum.Call {
  get inputs(): SetOptionsPoolAddressCall__Inputs {
    return new SetOptionsPoolAddressCall__Inputs(this);
  }

  get outputs(): SetOptionsPoolAddressCall__Outputs {
    return new SetOptionsPoolAddressCall__Outputs(this);
  }
}

export class SetOptionsPoolAddressCall__Inputs {
  _call: SetOptionsPoolAddressCall;

  constructor(call: SetOptionsPoolAddressCall) {
    this._call = call;
  }

  get _optionsPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOptionsPoolAddressCall__Outputs {
  _call: SetOptionsPoolAddressCall;

  constructor(call: SetOptionsPoolAddressCall) {
    this._call = call;
  }
}

export class SetOptionsPriceAddressCall extends ethereum.Call {
  get inputs(): SetOptionsPriceAddressCall__Inputs {
    return new SetOptionsPriceAddressCall__Inputs(this);
  }

  get outputs(): SetOptionsPriceAddressCall__Outputs {
    return new SetOptionsPriceAddressCall__Outputs(this);
  }
}

export class SetOptionsPriceAddressCall__Inputs {
  _call: SetOptionsPriceAddressCall;

  constructor(call: SetOptionsPriceAddressCall) {
    this._call = call;
  }

  get _optionsPrice(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOptionsPriceAddressCall__Outputs {
  _call: SetOptionsPriceAddressCall;

  constructor(call: SetOptionsPriceAddressCall) {
    this._call = call;
  }
}

export class SetOracleAddressCall extends ethereum.Call {
  get inputs(): SetOracleAddressCall__Inputs {
    return new SetOracleAddressCall__Inputs(this);
  }

  get outputs(): SetOracleAddressCall__Outputs {
    return new SetOracleAddressCall__Outputs(this);
  }
}

export class SetOracleAddressCall__Inputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }

  get oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleAddressCall__Outputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }
}

export class SetPriceRateRangeCall extends ethereum.Call {
  get inputs(): SetPriceRateRangeCall__Inputs {
    return new SetPriceRateRangeCall__Inputs(this);
  }

  get outputs(): SetPriceRateRangeCall__Outputs {
    return new SetPriceRateRangeCall__Outputs(this);
  }
}

export class SetPriceRateRangeCall__Inputs {
  _call: SetPriceRateRangeCall;

  constructor(call: SetPriceRateRangeCall) {
    this._call = call;
  }

  get _minPriceRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxPriceRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPriceRateRangeCall__Outputs {
  _call: SetPriceRateRangeCall;

  constructor(call: SetPriceRateRangeCall) {
    this._call = call;
  }
}

export class TransferOriginCall extends ethereum.Call {
  get inputs(): TransferOriginCall__Inputs {
    return new TransferOriginCall__Inputs(this);
  }

  get outputs(): TransferOriginCall__Outputs {
    return new TransferOriginCall__Outputs(this);
  }
}

export class TransferOriginCall__Inputs {
  _call: TransferOriginCall;

  constructor(call: TransferOriginCall) {
    this._call = call;
  }

  get _newOrigin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOriginCall__Outputs {
  _call: TransferOriginCall;

  constructor(call: TransferOriginCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateCall extends ethereum.Call {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}
