// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddCollateral extends ethereum.Event {
  get params(): AddCollateral__Params {
    return new AddCollateral__Params(this);
  }
}

export class AddCollateral__Params {
  _event: AddCollateral;

  constructor(event: AddCollateral) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BuyOption extends ethereum.Event {
  get params(): BuyOption__Params {
    return new BuyOption__Params(this);
  }
}

export class BuyOption__Params {
  _event: BuyOption;

  constructor(event: BuyOption) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get settlement(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get optionPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get settlementAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get optionAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class DebugEvent extends ethereum.Event {
  get params(): DebugEvent__Params {
    return new DebugEvent__Params(this);
  }
}

export class DebugEvent__Params {
  _event: DebugEvent;

  constructor(event: DebugEvent) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ExerciseOption extends ethereum.Event {
  get params(): ExerciseOption__Params {
    return new ExerciseOption__Params(this);
  }
}

export class ExerciseOption__Params {
  _event: ExerciseOption;

  constructor(event: ExerciseOption) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get optionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sellValue(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RedeemCollateral extends ethereum.Event {
  get params(): RedeemCollateral__Params {
    return new RedeemCollateral__Params(this);
  }
}

export class RedeemCollateral__Params {
  _event: RedeemCollateral;

  constructor(event: RedeemCollateral) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get allRedeem(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SellOption extends ethereum.Event {
  get params(): SellOption__Params {
    return new SellOption__Params(this);
  }
}

export class SellOption__Params {
  _event: SellOption;

  constructor(event: SellOption) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get optionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sellValue(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OptionManager__getALLCollateralinfoResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    return map;
  }
}

export class OptionManager__getInputAmountRangeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class OptionManager__getPriceRateRangeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class OptionManager extends ethereum.SmartContract {
  static bind(address: Address): OptionManager {
    return new OptionManager("OptionManager", address);
  }

  allowance(spender: Address): BigInt {
    let result = super.call("allowance", "allowance(address):(uint256)", [
      ethereum.Value.fromAddress(spender)
    ]);

    return result[0].toBigInt();
  }

  try_allowance(spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("allowance", "allowance(address):(uint256)", [
      ethereum.Value.fromAddress(spender)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calCollateralWorth(param0: Address): Array<BigInt> {
    let result = super.call(
      "calCollateralWorth",
      "calCollateralWorth(address):(uint256[])",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigIntArray();
  }

  try_calCollateralWorth(param0: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "calCollateralWorth",
      "calCollateralWorth(address):(uint256[])",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  calOptionsOccupied(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt,
    param3: i32
  ): BigInt {
    let result = super.call(
      "calOptionsOccupied",
      "calOptionsOccupied(uint256,uint256,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param3))
      ]
    );

    return result[0].toBigInt();
  }

  try_calOptionsOccupied(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt,
    param3: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calOptionsOccupied",
      "calOptionsOccupied(uint256,uint256,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param3))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateCollateralRate(): BigInt {
    let result = super.call(
      "calculateCollateralRate",
      "calculateCollateralRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_calculateCollateralRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateCollateralRate",
      "calculateCollateralRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkAddressPermission(tmpAddress: Address, state: BigInt): boolean {
    let result = super.call(
      "checkAddressPermission",
      "checkAddressPermission(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(tmpAddress),
        ethereum.Value.fromUnsignedBigInt(state)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkAddressPermission(
    tmpAddress: Address,
    state: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkAddressPermission",
      "checkAddressPermission(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(tmpAddress),
        ethereum.Value.fromUnsignedBigInt(state)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkAllowance(spender: Address, amount: BigInt): boolean {
    let result = super.call(
      "checkAllowance",
      "checkAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkAllowance(
    spender: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkAllowance",
      "checkAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delegateToImplementation(data: Bytes): Bytes {
    let result = super.call(
      "delegateToImplementation",
      "delegateToImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );

    return result[0].toBytes();
  }

  try_delegateToImplementation(data: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "delegateToImplementation",
      "delegateToImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  delegateToViewImplementation(data: Bytes): Bytes {
    let result = super.call(
      "delegateToViewImplementation",
      "delegateToViewImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );

    return result[0].toBytes();
  }

  try_delegateToViewImplementation(data: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "delegateToViewImplementation",
      "delegateToViewImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getALLCollateralinfo(
    param0: Address
  ): OptionManager__getALLCollateralinfoResult {
    let result = super.call(
      "getALLCollateralinfo",
      "getALLCollateralinfo(address):(uint256[],int256[],uint32[],uint32[])",
      [ethereum.Value.fromAddress(param0)]
    );

    return new OptionManager__getALLCollateralinfoResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray()
    );
  }

  try_getALLCollateralinfo(
    param0: Address
  ): ethereum.CallResult<OptionManager__getALLCollateralinfoResult> {
    let result = super.tryCall(
      "getALLCollateralinfo",
      "getALLCollateralinfo(address):(uint256[],int256[],uint32[],uint32[])",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionManager__getALLCollateralinfoResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray()
      )
    );
  }

  getAvailableCollateral(): BigInt {
    let result = super.call(
      "getAvailableCollateral",
      "getAvailableCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAvailableCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAvailableCollateral",
      "getAvailableCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCollateralPoolAddress(): Address {
    let result = super.call(
      "getCollateralPoolAddress",
      "getCollateralPoolAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getCollateralPoolAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCollateralPoolAddress",
      "getCollateralPoolAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCollateralRate(param0: Address): BigInt {
    let result = super.call(
      "getCollateralRate",
      "getCollateralRate(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_getCollateralRate(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralRate",
      "getCollateralRate(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFPTCoinAddress(): Address {
    let result = super.call(
      "getFPTCoinAddress",
      "getFPTCoinAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getFPTCoinAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getFPTCoinAddress",
      "getFPTCoinAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getImplementation(): Address {
    let result = super.call(
      "getImplementation",
      "getImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getImplementation",
      "getImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getInputAmountRange(): OptionManager__getInputAmountRangeResult {
    let result = super.call(
      "getInputAmountRange",
      "getInputAmountRange():(uint256,uint256)",
      []
    );

    return new OptionManager__getInputAmountRangeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getInputAmountRange(): ethereum.CallResult<
    OptionManager__getInputAmountRangeResult
  > {
    let result = super.tryCall(
      "getInputAmountRange",
      "getInputAmountRange():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionManager__getInputAmountRangeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getLeftCollateral(): BigInt {
    let result = super.call(
      "getLeftCollateral",
      "getLeftCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLeftCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLeftCollateral",
      "getLeftCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNetWorthBalance(param0: Address): BigInt {
    let result = super.call(
      "getNetWorthBalance",
      "getNetWorthBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_getNetWorthBalance(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNetWorthBalance",
      "getNetWorthBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOccupiedCollateral(): BigInt {
    let result = super.call(
      "getOccupiedCollateral",
      "getOccupiedCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getOccupiedCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOccupiedCollateral",
      "getOccupiedCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOptionsPoolAddress(): Address {
    let result = super.call(
      "getOptionsPoolAddress",
      "getOptionsPoolAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getOptionsPoolAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOptionsPoolAddress",
      "getOptionsPoolAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOptionsPrice(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt,
    param3: BigInt,
    param4: BigInt,
    param5: i32
  ): BigInt {
    let result = super.call(
      "getOptionsPrice",
      "getOptionsPrice(uint256,uint256,uint256,uint32,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param5))
      ]
    );

    return result[0].toBigInt();
  }

  try_getOptionsPrice(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt,
    param3: BigInt,
    param4: BigInt,
    param5: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOptionsPrice",
      "getOptionsPrice(uint256,uint256,uint256,uint32,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param5))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOptionsPriceAddress(): Address {
    let result = super.call(
      "getOptionsPriceAddress",
      "getOptionsPriceAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getOptionsPriceAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOptionsPriceAddress",
      "getOptionsPriceAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOracleAddress(): Address {
    let result = super.call(
      "getOracleAddress",
      "getOracleAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getOracleAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOracleAddress",
      "getOracleAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPriceRateRange(): OptionManager__getPriceRateRangeResult {
    let result = super.call(
      "getPriceRateRange",
      "getPriceRateRange():(uint256,uint256)",
      []
    );

    return new OptionManager__getPriceRateRangeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getPriceRateRange(): ethereum.CallResult<
    OptionManager__getPriceRateRangeResult
  > {
    let result = super.tryCall(
      "getPriceRateRange",
      "getPriceRateRange():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionManager__getPriceRateRangeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getRealBalance(param0: Address): BigInt {
    let result = super.call(
      "getRealBalance",
      "getRealBalance(address):(int256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_getRealBalance(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRealBalance",
      "getRealBalance(address):(int256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenNetworth(): BigInt {
    let result = super.call(
      "getTokenNetworth",
      "getTokenNetworth():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTokenNetworth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenNetworth",
      "getTokenNetworth():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalCollateral(): BigInt {
    let result = super.call(
      "getTotalCollateral",
      "getTotalCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalCollateral",
      "getTotalCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnlockedCollateral(): BigInt {
    let result = super.call(
      "getUnlockedCollateral",
      "getUnlockedCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getUnlockedCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUnlockedCollateral",
      "getUnlockedCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserPayingUsd(param0: Address): BigInt {
    let result = super.call(
      "getUserPayingUsd",
      "getUserPayingUsd(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_getUserPayingUsd(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserPayingUsd",
      "getUserPayingUsd(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserTotalWorth(param0: Address): BigInt {
    let result = super.call(
      "getUserTotalWorth",
      "getUserTotalWorth(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_getUserTotalWorth(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserTotalWorth",
      "getUserTotalWorth(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWhiteList(): Array<Address> {
    let result = super.call("getWhiteList", "getWhiteList():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getWhiteList(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getWhiteList",
      "getWhiteList():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isEligibleAddress(tmpAddress: Address): boolean {
    let result = super.call(
      "isEligibleAddress",
      "isEligibleAddress(address):(bool)",
      [ethereum.Value.fromAddress(tmpAddress)]
    );

    return result[0].toBoolean();
  }

  try_isEligibleAddress(tmpAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEligibleAddress",
      "isEligibleAddress(address):(bool)",
      [ethereum.Value.fromAddress(tmpAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isInputAmountInRange(Amount: BigInt): boolean {
    let result = super.call(
      "isInputAmountInRange",
      "isInputAmountInRange(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(Amount)]
    );

    return result[0].toBoolean();
  }

  try_isInputAmountInRange(Amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInputAmountInRange",
      "isInputAmountInRange(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(Amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  removeWhiteList(removeAddress: Address): boolean {
    let result = super.call(
      "removeWhiteList",
      "removeWhiteList(address):(bool)",
      [ethereum.Value.fromAddress(removeAddress)]
    );

    return result[0].toBoolean();
  }

  try_removeWhiteList(removeAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removeWhiteList",
      "removeWhiteList(address):(bool)",
      [ethereum.Value.fromAddress(removeAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userInputCollateral(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "userInputCollateral",
      "userInputCollateral(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_userInputCollateral(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userInputCollateral",
      "userInputCollateral(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get implementation_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oracleAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get optionsPriceAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get optionsPoolAddr(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get collateralPoolAddr(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get FPTCoinAddr(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCollateralCall extends ethereum.Call {
  get inputs(): AddCollateralCall__Inputs {
    return new AddCollateralCall__Inputs(this);
  }

  get outputs(): AddCollateralCall__Outputs {
    return new AddCollateralCall__Outputs(this);
  }
}

export class AddCollateralCall__Inputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddCollateralCall__Outputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }
}

export class AddWhiteListCall extends ethereum.Call {
  get inputs(): AddWhiteListCall__Inputs {
    return new AddWhiteListCall__Inputs(this);
  }

  get outputs(): AddWhiteListCall__Outputs {
    return new AddWhiteListCall__Outputs(this);
  }
}

export class AddWhiteListCall__Inputs {
  _call: AddWhiteListCall;

  constructor(call: AddWhiteListCall) {
    this._call = call;
  }

  get addAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddWhiteListCall__Outputs {
  _call: AddWhiteListCall;

  constructor(call: AddWhiteListCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BuyOptionCall extends ethereum.Call {
  get inputs(): BuyOptionCall__Inputs {
    return new BuyOptionCall__Inputs(this);
  }

  get outputs(): BuyOptionCall__Outputs {
    return new BuyOptionCall__Outputs(this);
  }
}

export class BuyOptionCall__Inputs {
  _call: BuyOptionCall;

  constructor(call: BuyOptionCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get value5(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get value6(): i32 {
    return this._call.inputValues[6].value.toI32();
  }
}

export class BuyOptionCall__Outputs {
  _call: BuyOptionCall;

  constructor(call: BuyOptionCall) {
    this._call = call;
  }
}

export class DelegateToImplementationCall extends ethereum.Call {
  get inputs(): DelegateToImplementationCall__Inputs {
    return new DelegateToImplementationCall__Inputs(this);
  }

  get outputs(): DelegateToImplementationCall__Outputs {
    return new DelegateToImplementationCall__Outputs(this);
  }
}

export class DelegateToImplementationCall__Inputs {
  _call: DelegateToImplementationCall;

  constructor(call: DelegateToImplementationCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class DelegateToImplementationCall__Outputs {
  _call: DelegateToImplementationCall;

  constructor(call: DelegateToImplementationCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ExerciseOptionCall extends ethereum.Call {
  get inputs(): ExerciseOptionCall__Inputs {
    return new ExerciseOptionCall__Inputs(this);
  }

  get outputs(): ExerciseOptionCall__Outputs {
    return new ExerciseOptionCall__Outputs(this);
  }
}

export class ExerciseOptionCall__Inputs {
  _call: ExerciseOptionCall;

  constructor(call: ExerciseOptionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExerciseOptionCall__Outputs {
  _call: ExerciseOptionCall;

  constructor(call: ExerciseOptionCall) {
    this._call = call;
  }
}

export class ModifyPermissionCall extends ethereum.Call {
  get inputs(): ModifyPermissionCall__Inputs {
    return new ModifyPermissionCall__Inputs(this);
  }

  get outputs(): ModifyPermissionCall__Outputs {
    return new ModifyPermissionCall__Outputs(this);
  }
}

export class ModifyPermissionCall__Inputs {
  _call: ModifyPermissionCall;

  constructor(call: ModifyPermissionCall) {
    this._call = call;
  }

  get addAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get permission(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ModifyPermissionCall__Outputs {
  _call: ModifyPermissionCall;

  constructor(call: ModifyPermissionCall) {
    this._call = call;
  }
}

export class RedeemCollateralCall extends ethereum.Call {
  get inputs(): RedeemCollateralCall__Inputs {
    return new RedeemCollateralCall__Inputs(this);
  }

  get outputs(): RedeemCollateralCall__Outputs {
    return new RedeemCollateralCall__Outputs(this);
  }
}

export class RedeemCollateralCall__Inputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RedeemCollateralCall__Outputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }
}

export class RemoveWhiteListCall extends ethereum.Call {
  get inputs(): RemoveWhiteListCall__Inputs {
    return new RemoveWhiteListCall__Inputs(this);
  }

  get outputs(): RemoveWhiteListCall__Outputs {
    return new RemoveWhiteListCall__Outputs(this);
  }
}

export class RemoveWhiteListCall__Inputs {
  _call: RemoveWhiteListCall;

  constructor(call: RemoveWhiteListCall) {
    this._call = call;
  }

  get removeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveWhiteListCall__Outputs {
  _call: RemoveWhiteListCall;

  constructor(call: RemoveWhiteListCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SellOptionCall extends ethereum.Call {
  get inputs(): SellOptionCall__Inputs {
    return new SellOptionCall__Inputs(this);
  }

  get outputs(): SellOptionCall__Outputs {
    return new SellOptionCall__Outputs(this);
  }
}

export class SellOptionCall__Inputs {
  _call: SellOptionCall;

  constructor(call: SellOptionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SellOptionCall__Outputs {
  _call: SellOptionCall;

  constructor(call: SellOptionCall) {
    this._call = call;
  }
}

export class SetCollateralPoolAddressCall extends ethereum.Call {
  get inputs(): SetCollateralPoolAddressCall__Inputs {
    return new SetCollateralPoolAddressCall__Inputs(this);
  }

  get outputs(): SetCollateralPoolAddressCall__Outputs {
    return new SetCollateralPoolAddressCall__Outputs(this);
  }
}

export class SetCollateralPoolAddressCall__Inputs {
  _call: SetCollateralPoolAddressCall;

  constructor(call: SetCollateralPoolAddressCall) {
    this._call = call;
  }

  get collateralPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCollateralPoolAddressCall__Outputs {
  _call: SetCollateralPoolAddressCall;

  constructor(call: SetCollateralPoolAddressCall) {
    this._call = call;
  }
}

export class SetCollateralRateCall extends ethereum.Call {
  get inputs(): SetCollateralRateCall__Inputs {
    return new SetCollateralRateCall__Inputs(this);
  }

  get outputs(): SetCollateralRateCall__Outputs {
    return new SetCollateralRateCall__Outputs(this);
  }
}

export class SetCollateralRateCall__Inputs {
  _call: SetCollateralRateCall;

  constructor(call: SetCollateralRateCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetCollateralRateCall__Outputs {
  _call: SetCollateralRateCall;

  constructor(call: SetCollateralRateCall) {
    this._call = call;
  }
}

export class SetFPTCoinAddressCall extends ethereum.Call {
  get inputs(): SetFPTCoinAddressCall__Inputs {
    return new SetFPTCoinAddressCall__Inputs(this);
  }

  get outputs(): SetFPTCoinAddressCall__Outputs {
    return new SetFPTCoinAddressCall__Outputs(this);
  }
}

export class SetFPTCoinAddressCall__Inputs {
  _call: SetFPTCoinAddressCall;

  constructor(call: SetFPTCoinAddressCall) {
    this._call = call;
  }

  get FPTCoinAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFPTCoinAddressCall__Outputs {
  _call: SetFPTCoinAddressCall;

  constructor(call: SetFPTCoinAddressCall) {
    this._call = call;
  }
}

export class SetHaltCall extends ethereum.Call {
  get inputs(): SetHaltCall__Inputs {
    return new SetHaltCall__Inputs(this);
  }

  get outputs(): SetHaltCall__Outputs {
    return new SetHaltCall__Outputs(this);
  }
}

export class SetHaltCall__Inputs {
  _call: SetHaltCall;

  constructor(call: SetHaltCall) {
    this._call = call;
  }

  get halt(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetHaltCall__Outputs {
  _call: SetHaltCall;

  constructor(call: SetHaltCall) {
    this._call = call;
  }
}

export class SetImplementationCall extends ethereum.Call {
  get inputs(): SetImplementationCall__Inputs {
    return new SetImplementationCall__Inputs(this);
  }

  get outputs(): SetImplementationCall__Outputs {
    return new SetImplementationCall__Outputs(this);
  }
}

export class SetImplementationCall__Inputs {
  _call: SetImplementationCall;

  constructor(call: SetImplementationCall) {
    this._call = call;
  }

  get implementation_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetImplementationCall__Outputs {
  _call: SetImplementationCall;

  constructor(call: SetImplementationCall) {
    this._call = call;
  }
}

export class SetInputAmountRangeCall extends ethereum.Call {
  get inputs(): SetInputAmountRangeCall__Inputs {
    return new SetInputAmountRangeCall__Inputs(this);
  }

  get outputs(): SetInputAmountRangeCall__Outputs {
    return new SetInputAmountRangeCall__Outputs(this);
  }
}

export class SetInputAmountRangeCall__Inputs {
  _call: SetInputAmountRangeCall;

  constructor(call: SetInputAmountRangeCall) {
    this._call = call;
  }

  get _minAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetInputAmountRangeCall__Outputs {
  _call: SetInputAmountRangeCall;

  constructor(call: SetInputAmountRangeCall) {
    this._call = call;
  }
}

export class SetOptionsPoolAddressCall extends ethereum.Call {
  get inputs(): SetOptionsPoolAddressCall__Inputs {
    return new SetOptionsPoolAddressCall__Inputs(this);
  }

  get outputs(): SetOptionsPoolAddressCall__Outputs {
    return new SetOptionsPoolAddressCall__Outputs(this);
  }
}

export class SetOptionsPoolAddressCall__Inputs {
  _call: SetOptionsPoolAddressCall;

  constructor(call: SetOptionsPoolAddressCall) {
    this._call = call;
  }

  get optionsPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOptionsPoolAddressCall__Outputs {
  _call: SetOptionsPoolAddressCall;

  constructor(call: SetOptionsPoolAddressCall) {
    this._call = call;
  }
}

export class SetOptionsPriceAddressCall extends ethereum.Call {
  get inputs(): SetOptionsPriceAddressCall__Inputs {
    return new SetOptionsPriceAddressCall__Inputs(this);
  }

  get outputs(): SetOptionsPriceAddressCall__Outputs {
    return new SetOptionsPriceAddressCall__Outputs(this);
  }
}

export class SetOptionsPriceAddressCall__Inputs {
  _call: SetOptionsPriceAddressCall;

  constructor(call: SetOptionsPriceAddressCall) {
    this._call = call;
  }

  get optionsPrice(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOptionsPriceAddressCall__Outputs {
  _call: SetOptionsPriceAddressCall;

  constructor(call: SetOptionsPriceAddressCall) {
    this._call = call;
  }
}

export class SetOracleAddressCall extends ethereum.Call {
  get inputs(): SetOracleAddressCall__Inputs {
    return new SetOracleAddressCall__Inputs(this);
  }

  get outputs(): SetOracleAddressCall__Outputs {
    return new SetOracleAddressCall__Outputs(this);
  }
}

export class SetOracleAddressCall__Inputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }

  get oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleAddressCall__Outputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }
}

export class SetPriceRateRangeCall extends ethereum.Call {
  get inputs(): SetPriceRateRangeCall__Inputs {
    return new SetPriceRateRangeCall__Inputs(this);
  }

  get outputs(): SetPriceRateRangeCall__Outputs {
    return new SetPriceRateRangeCall__Outputs(this);
  }
}

export class SetPriceRateRangeCall__Inputs {
  _call: SetPriceRateRangeCall;

  constructor(call: SetPriceRateRangeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPriceRateRangeCall__Outputs {
  _call: SetPriceRateRangeCall;

  constructor(call: SetPriceRateRangeCall) {
    this._call = call;
  }
}

export class SetValidCall extends ethereum.Call {
  get inputs(): SetValidCall__Inputs {
    return new SetValidCall__Inputs(this);
  }

  get outputs(): SetValidCall__Outputs {
    return new SetValidCall__Outputs(this);
  }
}

export class SetValidCall__Inputs {
  _call: SetValidCall;

  constructor(call: SetValidCall) {
    this._call = call;
  }

  get _bValid(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetValidCall__Outputs {
  _call: SetValidCall;

  constructor(call: SetValidCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
