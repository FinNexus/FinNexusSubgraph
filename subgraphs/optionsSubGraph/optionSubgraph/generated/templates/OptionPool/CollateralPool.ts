// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddFee extends ethereum.Event {
  get params(): AddFee__Params {
    return new AddFee__Params(this);
  }
}

export class AddFee__Params {
  _event: AddFee;

  constructor(event: AddFee) {
    this._event = event;
  }

  get settlement(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get payback(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DebugEvent extends ethereum.Event {
  get params(): DebugEvent__Params {
    return new DebugEvent__Params(this);
  }
}

export class DebugEvent__Params {
  _event: DebugEvent;

  constructor(event: DebugEvent) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get msgHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get value1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OperatorTransferred extends ethereum.Event {
  get params(): OperatorTransferred__Params {
    return new OperatorTransferred__Params(this);
  }
}

export class OperatorTransferred__Params {
  _event: OperatorTransferred;

  constructor(event: OperatorTransferred) {
    this._event = event;
  }

  get previousOperator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOperator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OriginTransferred extends ethereum.Event {
  get params(): OriginTransferred__Params {
    return new OriginTransferred__Params(this);
  }
}

export class OriginTransferred__Params {
  _event: OriginTransferred;

  constructor(event: OriginTransferred) {
    this._event = event;
  }

  get previousOrigin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOrigin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get recieptor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CollateralPool__getCollateralAndPremiumBalancesResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class CollateralPool extends ethereum.SmartContract {
  static bind(address: Address): CollateralPool {
    return new CollateralPool("CollateralPool", address);
  }

  addTransactionFee(
    collateral: Address,
    amount: BigInt,
    feeType: BigInt
  ): BigInt {
    let result = super.call(
      "addTransactionFee",
      "addTransactionFee(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(collateral),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(feeType)
      ]
    );

    return result[0].toBigInt();
  }

  try_addTransactionFee(
    collateral: Address,
    amount: BigInt,
    feeType: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addTransactionFee",
      "addTransactionFee(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(collateral),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(feeType)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateFee(feeType: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "calculateFee",
      "calculateFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(feeType),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateFee(
    feeType: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateFee",
      "calculateFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(feeType),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllRealBalance(whiteList: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getAllRealBalance",
      "getAllRealBalance(address[]):(int256[])",
      [ethereum.Value.fromAddressArray(whiteList)]
    );

    return result[0].toBigIntArray();
  }

  try_getAllRealBalance(
    whiteList: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAllRealBalance",
      "getAllRealBalance(address[]):(int256[])",
      [ethereum.Value.fromAddressArray(whiteList)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getCollateralAndPremiumBalances(
    account: Address,
    userTotalWorth: BigInt,
    tmpWhiteList: Array<Address>,
    _RealBalances: Array<BigInt>,
    prices: Array<BigInt>
  ): CollateralPool__getCollateralAndPremiumBalancesResult {
    let result = super.call(
      "getCollateralAndPremiumBalances",
      "getCollateralAndPremiumBalances(address,uint256,address[],uint256[],uint256[]):(uint256[],uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(userTotalWorth),
        ethereum.Value.fromAddressArray(tmpWhiteList),
        ethereum.Value.fromUnsignedBigIntArray(_RealBalances),
        ethereum.Value.fromUnsignedBigIntArray(prices)
      ]
    );

    return new CollateralPool__getCollateralAndPremiumBalancesResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_getCollateralAndPremiumBalances(
    account: Address,
    userTotalWorth: BigInt,
    tmpWhiteList: Array<Address>,
    _RealBalances: Array<BigInt>,
    prices: Array<BigInt>
  ): ethereum.CallResult<
    CollateralPool__getCollateralAndPremiumBalancesResult
  > {
    let result = super.tryCall(
      "getCollateralAndPremiumBalances",
      "getCollateralAndPremiumBalances(address,uint256,address[],uint256[],uint256[]):(uint256[],uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(userTotalWorth),
        ethereum.Value.fromAddressArray(tmpWhiteList),
        ethereum.Value.fromUnsignedBigIntArray(_RealBalances),
        ethereum.Value.fromUnsignedBigIntArray(prices)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CollateralPool__getCollateralAndPremiumBalancesResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getCollateralBalance(collateral: Address): BigInt {
    let result = super.call(
      "getCollateralBalance",
      "getCollateralBalance(address):(uint256)",
      [ethereum.Value.fromAddress(collateral)]
    );

    return result[0].toBigInt();
  }

  try_getCollateralBalance(collateral: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralBalance",
      "getCollateralBalance(address):(uint256)",
      [ethereum.Value.fromAddress(collateral)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFeeBalance(settlement: Address): BigInt {
    let result = super.call(
      "getFeeBalance",
      "getFeeBalance(address):(uint256)",
      [ethereum.Value.fromAddress(settlement)]
    );

    return result[0].toBigInt();
  }

  try_getFeeBalance(settlement: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFeeBalance",
      "getFeeBalance(address):(uint256)",
      [ethereum.Value.fromAddress(settlement)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFeeRate(feeType: BigInt): BigInt {
    let result = super.call("getFeeRate", "getFeeRate(uint256):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(feeType)
    ]);

    return result[0].toBigInt();
  }

  try_getFeeRate(feeType: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getFeeRate", "getFeeRate(uint256):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(feeType)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFeeRateAll(): Array<BigInt> {
    let result = super.call("getFeeRateAll", "getFeeRateAll():(uint32[])", []);

    return result[0].toBigIntArray();
  }

  try_getFeeRateAll(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getFeeRateAll",
      "getFeeRateAll():(uint32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getMultiSignatureAddress(): Address {
    let result = super.call(
      "getMultiSignatureAddress",
      "getMultiSignatureAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getMultiSignatureAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMultiSignatureAddress",
      "getMultiSignatureAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNetWorthBalance(settlement: Address): BigInt {
    let result = super.call(
      "getNetWorthBalance",
      "getNetWorthBalance(address):(uint256)",
      [ethereum.Value.fromAddress(settlement)]
    );

    return result[0].toBigInt();
  }

  try_getNetWorthBalance(settlement: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNetWorthBalance",
      "getNetWorthBalance(address):(uint256)",
      [ethereum.Value.fromAddress(settlement)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOperator(index: BigInt): Address {
    let result = super.call("getOperator", "getOperator(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toAddress();
  }

  try_getOperator(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOperator",
      "getOperator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRealBalance(settlement: Address): BigInt {
    let result = super.call(
      "getRealBalance",
      "getRealBalance(address):(int256)",
      [ethereum.Value.fromAddress(settlement)]
    );

    return result[0].toBigInt();
  }

  try_getRealBalance(settlement: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRealBalance",
      "getRealBalance(address):(int256)",
      [ethereum.Value.fromAddress(settlement)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserInputCollateral(user: Address, collateral: Address): BigInt {
    let result = super.call(
      "getUserInputCollateral",
      "getUserInputCollateral(address,address):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(collateral)]
    );

    return result[0].toBigInt();
  }

  try_getUserInputCollateral(
    user: Address,
    collateral: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserInputCollateral",
      "getUserInputCollateral(address,address):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(collateral)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserPayingUsd(user: Address): BigInt {
    let result = super.call(
      "getUserPayingUsd",
      "getUserPayingUsd(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getUserPayingUsd(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserPayingUsd",
      "getUserPayingUsd(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  implementationVersion(): BigInt {
    let result = super.call(
      "implementationVersion",
      "implementationVersion():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_implementationVersion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "implementationVersion",
      "implementationVersion():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  optionsPool(): Address {
    let result = super.call("optionsPool", "optionsPool():(address)", []);

    return result[0].toAddress();
  }

  try_optionsPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("optionsPool", "optionsPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerExpiredTime(): BigInt {
    let result = super.call(
      "ownerExpiredTime",
      "ownerExpiredTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ownerExpiredTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownerExpiredTime",
      "ownerExpiredTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  txOrigin(): Address {
    let result = super.call("txOrigin", "txOrigin():(address)", []);

    return result[0].toAddress();
  }

  try_txOrigin(): ethereum.CallResult<Address> {
    let result = super.tryCall("txOrigin", "txOrigin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get multiSignatureClient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddCollateralBalanceCall extends ethereum.Call {
  get inputs(): AddCollateralBalanceCall__Inputs {
    return new AddCollateralBalanceCall__Inputs(this);
  }

  get outputs(): AddCollateralBalanceCall__Outputs {
    return new AddCollateralBalanceCall__Outputs(this);
  }
}

export class AddCollateralBalanceCall__Inputs {
  _call: AddCollateralBalanceCall;

  constructor(call: AddCollateralBalanceCall) {
    this._call = call;
  }

  get collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddCollateralBalanceCall__Outputs {
  _call: AddCollateralBalanceCall;

  constructor(call: AddCollateralBalanceCall) {
    this._call = call;
  }
}

export class AddNetBalanceCall extends ethereum.Call {
  get inputs(): AddNetBalanceCall__Inputs {
    return new AddNetBalanceCall__Inputs(this);
  }

  get outputs(): AddNetBalanceCall__Outputs {
    return new AddNetBalanceCall__Outputs(this);
  }
}

export class AddNetBalanceCall__Inputs {
  _call: AddNetBalanceCall;

  constructor(call: AddNetBalanceCall) {
    this._call = call;
  }

  get settlement(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddNetBalanceCall__Outputs {
  _call: AddNetBalanceCall;

  constructor(call: AddNetBalanceCall) {
    this._call = call;
  }
}

export class AddNetWorthBalanceCall extends ethereum.Call {
  get inputs(): AddNetWorthBalanceCall__Inputs {
    return new AddNetWorthBalanceCall__Inputs(this);
  }

  get outputs(): AddNetWorthBalanceCall__Outputs {
    return new AddNetWorthBalanceCall__Outputs(this);
  }
}

export class AddNetWorthBalanceCall__Inputs {
  _call: AddNetWorthBalanceCall;

  constructor(call: AddNetWorthBalanceCall) {
    this._call = call;
  }

  get collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddNetWorthBalanceCall__Outputs {
  _call: AddNetWorthBalanceCall;

  constructor(call: AddNetWorthBalanceCall) {
    this._call = call;
  }
}

export class AddTransactionFeeCall extends ethereum.Call {
  get inputs(): AddTransactionFeeCall__Inputs {
    return new AddTransactionFeeCall__Inputs(this);
  }

  get outputs(): AddTransactionFeeCall__Outputs {
    return new AddTransactionFeeCall__Outputs(this);
  }
}

export class AddTransactionFeeCall__Inputs {
  _call: AddTransactionFeeCall;

  constructor(call: AddTransactionFeeCall) {
    this._call = call;
  }

  get collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get feeType(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddTransactionFeeCall__Outputs {
  _call: AddTransactionFeeCall;

  constructor(call: AddTransactionFeeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddUserInputCollateralCall extends ethereum.Call {
  get inputs(): AddUserInputCollateralCall__Inputs {
    return new AddUserInputCollateralCall__Inputs(this);
  }

  get outputs(): AddUserInputCollateralCall__Outputs {
    return new AddUserInputCollateralCall__Outputs(this);
  }
}

export class AddUserInputCollateralCall__Inputs {
  _call: AddUserInputCollateralCall;

  constructor(call: AddUserInputCollateralCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountUSD(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateral(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddUserInputCollateralCall__Outputs {
  _call: AddUserInputCollateralCall;

  constructor(call: AddUserInputCollateralCall) {
    this._call = call;
  }
}

export class BuyOptionsPayforCall extends ethereum.Call {
  get inputs(): BuyOptionsPayforCall__Inputs {
    return new BuyOptionsPayforCall__Inputs(this);
  }

  get outputs(): BuyOptionsPayforCall__Outputs {
    return new BuyOptionsPayforCall__Outputs(this);
  }
}

export class BuyOptionsPayforCall__Inputs {
  _call: BuyOptionsPayforCall;

  constructor(call: BuyOptionsPayforCall) {
    this._call = call;
  }

  get recieptor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get settlement(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get settlementAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get allPay(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BuyOptionsPayforCall__Outputs {
  _call: BuyOptionsPayforCall;

  constructor(call: BuyOptionsPayforCall) {
    this._call = call;
  }
}

export class CalSharedPaymentCall extends ethereum.Call {
  get inputs(): CalSharedPaymentCall__Inputs {
    return new CalSharedPaymentCall__Inputs(this);
  }

  get outputs(): CalSharedPaymentCall__Outputs {
    return new CalSharedPaymentCall__Outputs(this);
  }
}

export class CalSharedPaymentCall__Inputs {
  _call: CalSharedPaymentCall;

  constructor(call: CalSharedPaymentCall) {
    this._call = call;
  }

  get _whiteList(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class CalSharedPaymentCall__Outputs {
  _call: CalSharedPaymentCall;

  constructor(call: CalSharedPaymentCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get currency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class SetCollateralBalanceCall extends ethereum.Call {
  get inputs(): SetCollateralBalanceCall__Inputs {
    return new SetCollateralBalanceCall__Inputs(this);
  }

  get outputs(): SetCollateralBalanceCall__Outputs {
    return new SetCollateralBalanceCall__Outputs(this);
  }
}

export class SetCollateralBalanceCall__Inputs {
  _call: SetCollateralBalanceCall;

  constructor(call: SetCollateralBalanceCall) {
    this._call = call;
  }

  get collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetCollateralBalanceCall__Outputs {
  _call: SetCollateralBalanceCall;

  constructor(call: SetCollateralBalanceCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}

export class SetNetWorthBalanceCall extends ethereum.Call {
  get inputs(): SetNetWorthBalanceCall__Inputs {
    return new SetNetWorthBalanceCall__Inputs(this);
  }

  get outputs(): SetNetWorthBalanceCall__Outputs {
    return new SetNetWorthBalanceCall__Outputs(this);
  }
}

export class SetNetWorthBalanceCall__Inputs {
  _call: SetNetWorthBalanceCall;

  constructor(call: SetNetWorthBalanceCall) {
    this._call = call;
  }

  get collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetNetWorthBalanceCall__Outputs {
  _call: SetNetWorthBalanceCall;

  constructor(call: SetNetWorthBalanceCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetOptionsPoolAddressCall extends ethereum.Call {
  get inputs(): SetOptionsPoolAddressCall__Inputs {
    return new SetOptionsPoolAddressCall__Inputs(this);
  }

  get outputs(): SetOptionsPoolAddressCall__Outputs {
    return new SetOptionsPoolAddressCall__Outputs(this);
  }
}

export class SetOptionsPoolAddressCall__Inputs {
  _call: SetOptionsPoolAddressCall;

  constructor(call: SetOptionsPoolAddressCall) {
    this._call = call;
  }

  get _optionsPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOptionsPoolAddressCall__Outputs {
  _call: SetOptionsPoolAddressCall;

  constructor(call: SetOptionsPoolAddressCall) {
    this._call = call;
  }
}

export class SetSharedPaymentCall extends ethereum.Call {
  get inputs(): SetSharedPaymentCall__Inputs {
    return new SetSharedPaymentCall__Inputs(this);
  }

  get outputs(): SetSharedPaymentCall__Outputs {
    return new SetSharedPaymentCall__Outputs(this);
  }
}

export class SetSharedPaymentCall__Inputs {
  _call: SetSharedPaymentCall;

  constructor(call: SetSharedPaymentCall) {
    this._call = call;
  }

  get _whiteList(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get newNetworth(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get sharedBalances(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get firstOption(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetSharedPaymentCall__Outputs {
  _call: SetSharedPaymentCall;

  constructor(call: SetSharedPaymentCall) {
    this._call = call;
  }
}

export class SetTransactionFeeCall extends ethereum.Call {
  get inputs(): SetTransactionFeeCall__Inputs {
    return new SetTransactionFeeCall__Inputs(this);
  }

  get outputs(): SetTransactionFeeCall__Outputs {
    return new SetTransactionFeeCall__Outputs(this);
  }
}

export class SetTransactionFeeCall__Inputs {
  _call: SetTransactionFeeCall;

  constructor(call: SetTransactionFeeCall) {
    this._call = call;
  }

  get feeType(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get thousandth(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTransactionFeeCall__Outputs {
  _call: SetTransactionFeeCall;

  constructor(call: SetTransactionFeeCall) {
    this._call = call;
  }
}

export class SetUserInputCollateralCall extends ethereum.Call {
  get inputs(): SetUserInputCollateralCall__Inputs {
    return new SetUserInputCollateralCall__Inputs(this);
  }

  get outputs(): SetUserInputCollateralCall__Outputs {
    return new SetUserInputCollateralCall__Outputs(this);
  }
}

export class SetUserInputCollateralCall__Inputs {
  _call: SetUserInputCollateralCall;

  constructor(call: SetUserInputCollateralCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get collateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetUserInputCollateralCall__Outputs {
  _call: SetUserInputCollateralCall;

  constructor(call: SetUserInputCollateralCall) {
    this._call = call;
  }
}

export class SetUserPayingUsdCall extends ethereum.Call {
  get inputs(): SetUserPayingUsdCall__Inputs {
    return new SetUserPayingUsdCall__Inputs(this);
  }

  get outputs(): SetUserPayingUsdCall__Outputs {
    return new SetUserPayingUsdCall__Outputs(this);
  }
}

export class SetUserPayingUsdCall__Inputs {
  _call: SetUserPayingUsdCall;

  constructor(call: SetUserPayingUsdCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetUserPayingUsdCall__Outputs {
  _call: SetUserPayingUsdCall;

  constructor(call: SetUserPayingUsdCall) {
    this._call = call;
  }
}

export class SubCollateralBalanceCall extends ethereum.Call {
  get inputs(): SubCollateralBalanceCall__Inputs {
    return new SubCollateralBalanceCall__Inputs(this);
  }

  get outputs(): SubCollateralBalanceCall__Outputs {
    return new SubCollateralBalanceCall__Outputs(this);
  }
}

export class SubCollateralBalanceCall__Inputs {
  _call: SubCollateralBalanceCall;

  constructor(call: SubCollateralBalanceCall) {
    this._call = call;
  }

  get collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubCollateralBalanceCall__Outputs {
  _call: SubCollateralBalanceCall;

  constructor(call: SubCollateralBalanceCall) {
    this._call = call;
  }
}

export class SubNetWorthBalanceCall extends ethereum.Call {
  get inputs(): SubNetWorthBalanceCall__Inputs {
    return new SubNetWorthBalanceCall__Inputs(this);
  }

  get outputs(): SubNetWorthBalanceCall__Outputs {
    return new SubNetWorthBalanceCall__Outputs(this);
  }
}

export class SubNetWorthBalanceCall__Inputs {
  _call: SubNetWorthBalanceCall;

  constructor(call: SubNetWorthBalanceCall) {
    this._call = call;
  }

  get collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubNetWorthBalanceCall__Outputs {
  _call: SubNetWorthBalanceCall;

  constructor(call: SubNetWorthBalanceCall) {
    this._call = call;
  }
}

export class SubUserInputCollateralCall extends ethereum.Call {
  get inputs(): SubUserInputCollateralCall__Inputs {
    return new SubUserInputCollateralCall__Inputs(this);
  }

  get outputs(): SubUserInputCollateralCall__Outputs {
    return new SubUserInputCollateralCall__Outputs(this);
  }
}

export class SubUserInputCollateralCall__Inputs {
  _call: SubUserInputCollateralCall;

  constructor(call: SubUserInputCollateralCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get collateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SubUserInputCollateralCall__Outputs {
  _call: SubUserInputCollateralCall;

  constructor(call: SubUserInputCollateralCall) {
    this._call = call;
  }
}

export class SubUserPayingUsdCall extends ethereum.Call {
  get inputs(): SubUserPayingUsdCall__Inputs {
    return new SubUserPayingUsdCall__Inputs(this);
  }

  get outputs(): SubUserPayingUsdCall__Outputs {
    return new SubUserPayingUsdCall__Outputs(this);
  }
}

export class SubUserPayingUsdCall__Inputs {
  _call: SubUserPayingUsdCall;

  constructor(call: SubUserPayingUsdCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubUserPayingUsdCall__Outputs {
  _call: SubUserPayingUsdCall;

  constructor(call: SubUserPayingUsdCall) {
    this._call = call;
  }
}

export class TransferOriginCall extends ethereum.Call {
  get inputs(): TransferOriginCall__Inputs {
    return new TransferOriginCall__Inputs(this);
  }

  get outputs(): TransferOriginCall__Outputs {
    return new TransferOriginCall__Outputs(this);
  }
}

export class TransferOriginCall__Inputs {
  _call: TransferOriginCall;

  constructor(call: TransferOriginCall) {
    this._call = call;
  }

  get _newOrigin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOriginCall__Outputs {
  _call: TransferOriginCall;

  constructor(call: TransferOriginCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TransferPaybackCall extends ethereum.Call {
  get inputs(): TransferPaybackCall__Inputs {
    return new TransferPaybackCall__Inputs(this);
  }

  get outputs(): TransferPaybackCall__Outputs {
    return new TransferPaybackCall__Outputs(this);
  }
}

export class TransferPaybackCall__Inputs {
  _call: TransferPaybackCall;

  constructor(call: TransferPaybackCall) {
    this._call = call;
  }

  get recieptor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get settlement(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get payback(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferPaybackCall__Outputs {
  _call: TransferPaybackCall;

  constructor(call: TransferPaybackCall) {
    this._call = call;
  }
}

export class TransferPaybackAndFeeCall extends ethereum.Call {
  get inputs(): TransferPaybackAndFeeCall__Inputs {
    return new TransferPaybackAndFeeCall__Inputs(this);
  }

  get outputs(): TransferPaybackAndFeeCall__Outputs {
    return new TransferPaybackAndFeeCall__Outputs(this);
  }
}

export class TransferPaybackAndFeeCall__Inputs {
  _call: TransferPaybackAndFeeCall;

  constructor(call: TransferPaybackAndFeeCall) {
    this._call = call;
  }

  get recieptor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get settlement(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get payback(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get feeType(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferPaybackAndFeeCall__Outputs {
  _call: TransferPaybackAndFeeCall;

  constructor(call: TransferPaybackAndFeeCall) {
    this._call = call;
  }
}

export class TransferPaybackBalancesCall extends ethereum.Call {
  get inputs(): TransferPaybackBalancesCall__Inputs {
    return new TransferPaybackBalancesCall__Inputs(this);
  }

  get outputs(): TransferPaybackBalancesCall__Outputs {
    return new TransferPaybackBalancesCall__Outputs(this);
  }
}

export class TransferPaybackBalancesCall__Inputs {
  _call: TransferPaybackBalancesCall;

  constructor(call: TransferPaybackBalancesCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get redeemWorth(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tmpWhiteList(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get colBalances(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get PremiumBalances(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get prices(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class TransferPaybackBalancesCall__Outputs {
  _call: TransferPaybackBalancesCall;

  constructor(call: TransferPaybackBalancesCall) {
    this._call = call;
  }
}

export class UpdateCall extends ethereum.Call {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}
