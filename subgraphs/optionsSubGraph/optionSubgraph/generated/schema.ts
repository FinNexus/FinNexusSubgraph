// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class EntityOptionManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityOptionManager entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityOptionManager entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityOptionManager", id.toString(), this);
  }

  static load(id: string): EntityOptionManager | null {
    return store.get("EntityOptionManager", id) as EntityOptionManager | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class EntityOptionPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityOptionPool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityOptionPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityOptionPool", id.toString(), this);
  }

  static load(id: string): EntityOptionPool | null {
    return store.get("EntityOptionPool", id) as EntityOptionPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class EntityCollateralPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save EntityCollateralPool entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityCollateralPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityCollateralPool", id.toString(), this);
  }

  static load(id: string): EntityCollateralPool | null {
    return store.get("EntityCollateralPool", id) as EntityCollateralPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class EntityBuyOptionHashId extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save EntityBuyOptionHashId entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityBuyOptionHashId entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityBuyOptionHashId", id.toString(), this);
  }

  static load(id: string): EntityBuyOptionHashId | null {
    return store.get(
      "EntityBuyOptionHashId",
      id
    ) as EntityBuyOptionHashId | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get BuyHash(): string {
    let value = this.get("BuyHash");
    return value.toString();
  }

  set BuyHash(value: string) {
    this.set("BuyHash", Value.fromString(value));
  }
}

export class EntityBuyOptionItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityBuyOptionItem entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityBuyOptionItem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityBuyOptionItem", id.toString(), this);
  }

  static load(id: string): EntityBuyOptionItem | null {
    return store.get("EntityBuyOptionItem", id) as EntityBuyOptionItem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Owner(): Bytes | null {
    let value = this.get("Owner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set Owner(value: Bytes | null) {
    if (value === null) {
      this.unset("Owner");
    } else {
      this.set("Owner", Value.fromBytes(value as Bytes));
    }
  }

  get Optionid(): BigInt | null {
    let value = this.get("Optionid");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set Optionid(value: BigInt | null) {
    if (value === null) {
      this.unset("Optionid");
    } else {
      this.set("Optionid", Value.fromBigInt(value as BigInt));
    }
  }

  get OptType(): BigInt | null {
    let value = this.get("OptType");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set OptType(value: BigInt | null) {
    if (value === null) {
      this.unset("OptType");
    } else {
      this.set("OptType", Value.fromBigInt(value as BigInt));
    }
  }

  get Underlying(): BigInt | null {
    let value = this.get("Underlying");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set Underlying(value: BigInt | null) {
    if (value === null) {
      this.unset("Underlying");
    } else {
      this.set("Underlying", Value.fromBigInt(value as BigInt));
    }
  }

  get OptionPrice(): BigInt | null {
    let value = this.get("OptionPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set OptionPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("OptionPrice");
    } else {
      this.set("OptionPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get Settlement(): Bytes | null {
    let value = this.get("Settlement");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set Settlement(value: Bytes | null) {
    if (value === null) {
      this.unset("Settlement");
    } else {
      this.set("Settlement", Value.fromBytes(value as Bytes));
    }
  }

  get Expiration(): BigInt | null {
    let value = this.get("Expiration");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set Expiration(value: BigInt | null) {
    if (value === null) {
      this.unset("Expiration");
    } else {
      this.set("Expiration", Value.fromBigInt(value as BigInt));
    }
  }

  get Amount(): BigInt {
    let value = this.get("Amount");
    return value.toBigInt();
  }

  set Amount(value: BigInt) {
    this.set("Amount", Value.fromBigInt(value));
  }

  get StrikePrice(): BigInt | null {
    let value = this.get("StrikePrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set StrikePrice(value: BigInt | null) {
    if (value === null) {
      this.unset("StrikePrice");
    } else {
      this.set("StrikePrice", Value.fromBigInt(value as BigInt));
    }
  }

  get UnderLyingPrice(): BigInt | null {
    let value = this.get("UnderLyingPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set UnderLyingPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("UnderLyingPrice");
    } else {
      this.set("UnderLyingPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get CreatedTime(): BigInt {
    let value = this.get("CreatedTime");
    return value.toBigInt();
  }

  set CreatedTime(value: BigInt) {
    this.set("CreatedTime", Value.fromBigInt(value));
  }

  get CurrentWorth(): BigInt | null {
    let value = this.get("CurrentWorth");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set CurrentWorth(value: BigInt | null) {
    if (value === null) {
      this.unset("CurrentWorth");
    } else {
      this.set("CurrentWorth", Value.fromBigInt(value as BigInt));
    }
  }

  get Fee(): BigInt {
    let value = this.get("Fee");
    return value.toBigInt();
  }

  set Fee(value: BigInt) {
    this.set("Fee", Value.fromBigInt(value));
  }
}

export class EntityExcerciseOptionHashId extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save EntityExcerciseOptionHashId entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityExcerciseOptionHashId entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityExcerciseOptionHashId", id.toString(), this);
  }

  static load(id: string): EntityExcerciseOptionHashId | null {
    return store.get(
      "EntityExcerciseOptionHashId",
      id
    ) as EntityExcerciseOptionHashId | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ExcerciseHash(): string {
    let value = this.get("ExcerciseHash");
    return value.toString();
  }

  set ExcerciseHash(value: string) {
    this.set("ExcerciseHash", Value.fromString(value));
  }
}

export class EntityExcerciseOptionItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save EntityExcerciseOptionItem entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityExcerciseOptionItem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityExcerciseOptionItem", id.toString(), this);
  }

  static load(id: string): EntityExcerciseOptionItem | null {
    return store.get(
      "EntityExcerciseOptionItem",
      id
    ) as EntityExcerciseOptionItem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Optionid(): BigInt {
    let value = this.get("Optionid");
    return value.toBigInt();
  }

  set Optionid(value: BigInt) {
    this.set("Optionid", Value.fromBigInt(value));
  }

  get ExerciseAmount(): BigInt {
    let value = this.get("ExerciseAmount");
    return value.toBigInt();
  }

  set ExerciseAmount(value: BigInt) {
    this.set("ExerciseAmount", Value.fromBigInt(value));
  }

  get ExerciseBack(): BigInt {
    let value = this.get("ExerciseBack");
    return value.toBigInt();
  }

  set ExerciseBack(value: BigInt) {
    this.set("ExerciseBack", Value.fromBigInt(value));
  }

  get BuyPay(): BigInt | null {
    let value = this.get("BuyPay");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set BuyPay(value: BigInt | null) {
    if (value === null) {
      this.unset("BuyPay");
    } else {
      this.set("BuyPay", Value.fromBigInt(value as BigInt));
    }
  }
}

export class EntityOptionItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityOptionItem entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityOptionItem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityOptionItem", id.toString(), this);
  }

  static load(id: string): EntityOptionItem | null {
    return store.get("EntityOptionItem", id) as EntityOptionItem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Date(): BigInt {
    let value = this.get("Date");
    return value.toBigInt();
  }

  set Date(value: BigInt) {
    this.set("Date", Value.fromBigInt(value));
  }

  get Status(): string {
    let value = this.get("Status");
    return value.toString();
  }

  set Status(value: string) {
    this.set("Status", Value.fromString(value));
  }

  get UnderlyingAssets(): BigInt {
    let value = this.get("UnderlyingAssets");
    return value.toBigInt();
  }

  set UnderlyingAssets(value: BigInt) {
    this.set("UnderlyingAssets", Value.fromBigInt(value));
  }

  get Type(): BigInt {
    let value = this.get("Type");
    return value.toBigInt();
  }

  set Type(value: BigInt) {
    this.set("Type", Value.fromBigInt(value));
  }

  get Amount(): BigInt | null {
    let value = this.get("Amount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set Amount(value: BigInt | null) {
    if (value === null) {
      this.unset("Amount");
    } else {
      this.set("Amount", Value.fromBigInt(value as BigInt));
    }
  }

  get UsdValue(): BigInt | null {
    let value = this.get("UsdValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set UsdValue(value: BigInt | null) {
    if (value === null) {
      this.unset("UsdValue");
    } else {
      this.set("UsdValue", Value.fromBigInt(value as BigInt));
    }
  }

  get StrikePrice(): BigInt | null {
    let value = this.get("StrikePrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set StrikePrice(value: BigInt | null) {
    if (value === null) {
      this.unset("StrikePrice");
    } else {
      this.set("StrikePrice", Value.fromBigInt(value as BigInt));
    }
  }

  get Premium(): BigInt | null {
    let value = this.get("Premium");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set Premium(value: BigInt | null) {
    if (value === null) {
      this.unset("Premium");
    } else {
      this.set("Premium", Value.fromBigInt(value as BigInt));
    }
  }

  get PL(): BigInt | null {
    let value = this.get("PL");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set PL(value: BigInt | null) {
    if (value === null) {
      this.unset("PL");
    } else {
      this.set("PL", Value.fromBigInt(value as BigInt));
    }
  }
}

export class EntityTotalTLV extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityTotalTLV entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityTotalTLV entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityTotalTLV", id.toString(), this);
  }

  static load(id: string): EntityTotalTLV | null {
    return store.get("EntityTotalTLV", id) as EntityTotalTLV | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get TimeStamp(): BigInt {
    let value = this.get("TimeStamp");
    return value.toBigInt();
  }

  set TimeStamp(value: BigInt) {
    this.set("TimeStamp", Value.fromBigInt(value));
  }

  get TotalUsdValue(): BigInt {
    let value = this.get("TotalUsdValue");
    return value.toBigInt();
  }

  set TotalUsdValue(value: BigInt) {
    this.set("TotalUsdValue", Value.fromBigInt(value));
  }
}

export class EntityPoolTLV extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityPoolTLV entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityPoolTLV entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityPoolTLV", id.toString(), this);
  }

  static load(id: string): EntityPoolTLV | null {
    return store.get("EntityPoolTLV", id) as EntityPoolTLV | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get TimeStamp(): BigInt | null {
    let value = this.get("TimeStamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set TimeStamp(value: BigInt | null) {
    if (value === null) {
      this.unset("TimeStamp");
    } else {
      this.set("TimeStamp", Value.fromBigInt(value as BigInt));
    }
  }

  get Token(): Bytes | null {
    let value = this.get("Token");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set Token(value: Bytes | null) {
    if (value === null) {
      this.unset("Token");
    } else {
      this.set("Token", Value.fromBytes(value as Bytes));
    }
  }

  get Amout(): BigInt | null {
    let value = this.get("Amout");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set Amout(value: BigInt | null) {
    if (value === null) {
      this.unset("Amout");
    } else {
      this.set("Amout", Value.fromBigInt(value as BigInt));
    }
  }

  get UsdValue(): BigInt | null {
    let value = this.get("UsdValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set UsdValue(value: BigInt | null) {
    if (value === null) {
      this.unset("UsdValue");
    } else {
      this.set("UsdValue", Value.fromBigInt(value as BigInt));
    }
  }
}

export class EntityNetWorth extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityNetWorth entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityNetWorth entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityNetWorth", id.toString(), this);
  }

  static load(id: string): EntityNetWorth | null {
    return store.get("EntityNetWorth", id) as EntityNetWorth | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get TimeStamp(): BigInt {
    let value = this.get("TimeStamp");
    return value.toBigInt();
  }

  set TimeStamp(value: BigInt) {
    this.set("TimeStamp", Value.fromBigInt(value));
  }

  get Pool(): Bytes {
    let value = this.get("Pool");
    return value.toBytes();
  }

  set Pool(value: Bytes) {
    this.set("Pool", Value.fromBytes(value));
  }

  get NetWorth(): BigInt {
    let value = this.get("NetWorth");
    return value.toBigInt();
  }

  set NetWorth(value: BigInt) {
    this.set("NetWorth", Value.fromBigInt(value));
  }
}

export class EntityActiveOption extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityActiveOption entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityActiveOption entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityActiveOption", id.toString(), this);
  }

  static load(id: string): EntityActiveOption | null {
    return store.get("EntityActiveOption", id) as EntityActiveOption | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get TimeStamp(): BigInt {
    let value = this.get("TimeStamp");
    return value.toBigInt();
  }

  set TimeStamp(value: BigInt) {
    this.set("TimeStamp", Value.fromBigInt(value));
  }

  get Underlying(): BigInt {
    let value = this.get("Underlying");
    return value.toBigInt();
  }

  set Underlying(value: BigInt) {
    this.set("Underlying", Value.fromBigInt(value));
  }

  get CallAmount(): BigInt | null {
    let value = this.get("CallAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set CallAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("CallAmount");
    } else {
      this.set("CallAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get CallUsdValue(): BigInt | null {
    let value = this.get("CallUsdValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set CallUsdValue(value: BigInt | null) {
    if (value === null) {
      this.unset("CallUsdValue");
    } else {
      this.set("CallUsdValue", Value.fromBigInt(value as BigInt));
    }
  }

  get PutAmount(): BigInt | null {
    let value = this.get("PutAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set PutAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("PutAmount");
    } else {
      this.set("PutAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get PutUsdValue(): BigInt | null {
    let value = this.get("PutUsdValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set PutUsdValue(value: BigInt | null) {
    if (value === null) {
      this.unset("PutUsdValue");
    } else {
      this.set("PutUsdValue", Value.fromBigInt(value as BigInt));
    }
  }
}

export class EntityPremium extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityPremium entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityPremium entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityPremium", id.toString(), this);
  }

  static load(id: string): EntityPremium | null {
    return store.get("EntityPremium", id) as EntityPremium | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get TimeStamp(): BigInt {
    let value = this.get("TimeStamp");
    return value.toBigInt();
  }

  set TimeStamp(value: BigInt) {
    this.set("TimeStamp", Value.fromBigInt(value));
  }

  get Token(): Bytes | null {
    let value = this.get("Token");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set Token(value: Bytes | null) {
    if (value === null) {
      this.unset("Token");
    } else {
      this.set("Token", Value.fromBytes(value as Bytes));
    }
  }

  get CallAmount(): BigInt | null {
    let value = this.get("CallAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set CallAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("CallAmount");
    } else {
      this.set("CallAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get CallUsdValue(): BigInt | null {
    let value = this.get("CallUsdValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set CallUsdValue(value: BigInt | null) {
    if (value === null) {
      this.unset("CallUsdValue");
    } else {
      this.set("CallUsdValue", Value.fromBigInt(value as BigInt));
    }
  }

  get PutAmount(): BigInt | null {
    let value = this.get("PutAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set PutAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("PutAmount");
    } else {
      this.set("PutAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get PutUsdValue(): BigInt | null {
    let value = this.get("PutUsdValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set PutUsdValue(value: BigInt | null) {
    if (value === null) {
      this.unset("PutUsdValue");
    } else {
      this.set("PutUsdValue", Value.fromBigInt(value as BigInt));
    }
  }
}

export class EntityFee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityFee entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityFee entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityFee", id.toString(), this);
  }

  static load(id: string): EntityFee | null {
    return store.get("EntityFee", id) as EntityFee | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get TimeStamp(): BigInt {
    let value = this.get("TimeStamp");
    return value.toBigInt();
  }

  set TimeStamp(value: BigInt) {
    this.set("TimeStamp", Value.fromBigInt(value));
  }

  get Token(): Bytes | null {
    let value = this.get("Token");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set Token(value: Bytes | null) {
    if (value === null) {
      this.unset("Token");
    } else {
      this.set("Token", Value.fromBytes(value as Bytes));
    }
  }

  get CallAmount(): BigInt | null {
    let value = this.get("CallAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set CallAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("CallAmount");
    } else {
      this.set("CallAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get CallUsdValue(): BigInt | null {
    let value = this.get("CallUsdValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set CallUsdValue(value: BigInt | null) {
    if (value === null) {
      this.unset("CallUsdValue");
    } else {
      this.set("CallUsdValue", Value.fromBigInt(value as BigInt));
    }
  }

  get PutAmount(): BigInt | null {
    let value = this.get("PutAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set PutAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("PutAmount");
    } else {
      this.set("PutAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get PutUsdValue(): BigInt | null {
    let value = this.get("PutUsdValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set PutUsdValue(value: BigInt | null) {
    if (value === null) {
      this.unset("PutUsdValue");
    } else {
      this.set("PutUsdValue", Value.fromBigInt(value as BigInt));
    }
  }
}
